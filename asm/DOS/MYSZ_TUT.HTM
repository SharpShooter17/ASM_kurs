<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: Obs³uga myszy </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Obs³uga myszy w asemblerze">
<META NAME="Keywords" CONTENT="mysz, int 33h, assembler, asm, asembler">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:49 GMT">
</HEAD><BODY>

<h1 class="nag">Obs³uga myszy w asemblerze</h1>

<P>
W tej czê¶ci dowiemy siê, jak dodaæ w naszych programach obs³ugê myszy.<BR>
Do naszych celów potrzebne nam bêd± za³adowane sterowniki myszy w pamiêci oraz przerwanie
int 33h.</P>
<P>
Zapoznajmy siê z kilkoma podstawowymi funkcjami tego¿ przerwania (patrzymy oczywi¶cie w listê
przerwañ Ralfa <span lang="en">Brown</span>'a -
<A HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html"
 hreflang="en"><acronym title="Ralf Brown's Interrupt List" lang="en">RBIL</acronym></A>):</P>
	<BR><a href="#mysz_tut01" tabindex="1" class="bezdruk">(przeskocz opis funkcji int 33h)</a>

<PRE lang="en" title="int 33h, ax=0,1,2,4,6">
	INT 33 - MS MOUSE - RESET DRIVER AND READ STATUS
	        AX = 0000h
	Return: AX = status
            		0000h hardware/driver not installed
            		FFFFh hardware/driver installed
        	BX = number of buttons
            		0000h other than two
            		0002h two buttons (many drivers)
            		0003h Mouse Systems/Logitech three-button mouse
            		FFFFh two buttons

	INT 33 - MS MOUSE v1.0+ - SHOW MOUSE CURSOR
	        AX = 0001h

	INT 33 - MS MOUSE v1.0+ - HIDE MOUSE CURSOR
	        AX = 0002h

	INT 33 - MS MOUSE v1.0+ - POSITION MOUSE CURSOR
	        AX = 0004h
	        CX = column
	        DX = row

	INT 33 - MS MOUSE v1.0+ - RETURN BUTTON RELEASE DATA
	        AX = 0006h
	        BX = button number (see #03169)
	Return: AX = button states (see #03168)
	        BX = number of times specified button has been released since
	        	 last call
	        CX = column at time specified button was last released
	        DX = row at time specified button was last released

	(Table 03169)
	Values for mouse button number:
 	0000h  left
 	0001h  right
 	0002h  middle</PRE>

<P><a name="mysz_tut01" id="mysz_tut01">Tyle powinno nam wystarczyæ</a>.
 S± te¿ funkcje, które na przyk³ad definiuj± zasiêg poziomy i pionowy
kursora (mo¿na ustawiæ tak, ¿e kursor bêdzie siê móg³ poruszaæ tylko w wyznaczonym <q>oknie</q>),
ale tymi nie bêdziemy siê zajmowaæ.
</P>

<P>
Na dobry pocz±tek resetujemy sterownik i sprawdzamy, czy w ogóle jest jaka¶ mysz zainstalowana
(jeszcze wcze¶niej mo¿na by³oby sprawdziæ, czy sam sterownik nie jest procedur±, która nic
nie robi, ale pominê to). Kod jest wyj±tkowo krótki:</P>
<PRE>
	xor	ax, ax
	int	33h			; sprawdzamy, czy jest mysz
	or	ax, ax
	jz	brak_myszy</PRE>

<P>Jak by³o widaæ wcze¶niej, pokazanie kursora nie jest trudne i sprowadza siê do:</P>
<PRE>
	mov	ax, 1
	int	33h			; poka¿ kursor</PRE>

<P>Do szczê¶cia brakuje nam ju¿ tylko sprawdzenie, czy i gdzie naci¶niêto jaki¶ przycisk. Do tego
pos³u¿y nam funkcja numer 6. Wystarczy w BX podaæ interesuj±cy nas przycisk, a w CX i DX
powinni¶my otrzymaæ wspó³rzêdne (dobrze jest przed rozpoczêciem pracy wywo³aæ raz tê funkcjê
dla wszystkich przycisków, aby wyzerowaæ liczniki naci¶niêæ). Przyk³ad:</P>
<PRE>
	mov	ax, 6
	xor	bx, bx
	int	33h
	or	bx, bx
	jz	nie_wcisnieto_lewego

	mov	[kolumna], cx
	mov	[wiersz], dx</PRE>

<P>
Nie ma w tym du¿o wysi³ku, na szczê¶cie. Wszystko za nas robi sterownik, a my tylko potem
sprawdzamy rejestry.<BR>
Dlatego te¿ od razu przejdê do fina³u tego artyku³u i zaprezentujê program, w którym zawar³em
wszystko to, o czym mówi³em. Zadaniem programu jest nic innego, jak tylko wy¶wietlenie
odpowiedniego napisu, gdy u¿ytkownik naci¶nie jaki¶ klawisz myszki (naci¶niêcie czego¶ na
klawiaturze spowoduje wyj¶cie z programu). Napis zostanie wy¶wietlony w miejscu, gdzie
naci¶niêto przycisk.
</P>
<P>
Oto kod:</P>
	<BR><a href="#mysz_tut02" class="bezdruk">(przeskocz kod programu)</a>
<PRE title="Program wy¶wietlaj±cy napis w miejscu klikniêcia">
; Program wy¶wietlaj±cy napis w miejscu, gdzie zosta³ naci¶niêty
; klawisz myszki.
;
; POD WINDOWS URUCHAMIAÆ W TRYBIE PE£NOEKRANOWYM
;
;
; Autor: Bogdan D.
; kontakt: bogdandr (at) op (dot) pl
;
; nasm -O999 -o mysz.com -f bin mysz.asm


org 100h

	xor	ax, ax			; AX = 0
	int	33h			; sprawdzamy, czy jest mysz
	or	ax, ax
	jnz	mysz_ok

	mov	dx, nie_ma_myszy
	mov	ah, 9
	int	21h

	mov	ax, 4c01h		; zwracamy kod b³êdu=1
	int	21h


mysz_ok:
	mov	ax, 3
	int	10h			; czy¶cimy ekran

	mov	ax, 1
	int	33h			; pokazujemy kursor myszki

					; zerujemy liczniki naci¶niêæ:
	mov	ax, 6
	xor	bx, bx			; lewy przycisk
	int	33h

	mov	ax, 6
	mov	bx, 1			; prawy przycisk
	int	33h

petla:
	mov	ah, 1
	int	16h		; czy naci¶niêto klawisz na klawiaturze?
	jnz	koniec		; je¶li tak, to wychodzimy z programu

	mov	ax, 6
	xor	bx, bx			; sprawdzamy lewy przycisk
	int	33h

	or	bx, bx		; je¶li naci¶niêto, to idziemy co¶ wy¶wietliæ
	jnz	pokaz_l

	mov	ax, 6
	mov	bx, 1			; sprawdzamy prawy przycisk
	int	33h

	or	bx, bx		; je¶li naci¶niêto, to idziemy co¶ wy¶wietliæ
	jnz	pokaz_p

	jmp	short petla

pokaz_l:
				; wiemy, ze CX=kolumna, DX=wiersz, gdzie
				;naci¶niêto klawisz, ale to s± numery pikseli
				; Aby otrzymaæ kolumnê i wiersz, dzielimy je
				; przez 8 (bo jest 8 pikseli/znak):
	shr	dx, 3
	shr	cx, 3

	mov	ah, 2			; funkcja ustawiania kursora
	mov	dh, dl			; DH = wiersz
	mov	dl, cl			; DL = kolumna
	int	10h			; ustaw nasz kursor tam

	mov	dx, lewy_p
	mov	ah, 9
	int	21h

	jmp	short petla

pokaz_p:
				; wiemy, ze CX=kolumna, DX=wiersz, gdzie
				;naci¶niêto klawisz, ale to s± numery pikseli
				; Aby otrzymaæ kolumnê i wiersz, dzielimy je
				; przez 8 (bo jest 8 pikseli/znak):
	shr	dx, 3
	shr	cx, 3

	mov	ah, 2			; funkcja ustawiania kursora
	mov	dh, dl			; DH = wiersz
	mov	dl, cl			; DL = kolumna
	int	10h			; ustaw nasz kursor tam

	mov	dx, prawy_p
	mov	ah, 9
	int	21h

	jmp	short petla


koniec:
	mov	ax, 4c00h
	int	21h

nie_ma_myszy	db	&quot;Sterowniki myszy nie sa zainstalowane.$&quot;
lewy_p		db	&quot;Lewy$&quot;
prawy_p		db	&quot;Prawy$&quot;</PRE>

<P><a name="mysz_tut02" id="mysz_tut02">Jak widaæ, korzystanie z myszy</a> niekoniecznie musi byæ tak trudne,
 jak to siê mog³o wydawaæ.
Po bardziej zaawansowane funkcje radzê siêgn±æ do RBIL, gdzie zawsze znajdziecie wiêcej
informacji o danym przerwaniu ni¿ w moim kursie, który skupia siê przecie¿ na przedstawianiu
algorytmów a nie na zapamiêtywaniu ka¿dego szczególiku.

</P>
<P>
Mi³ego eksperymentowania.</P>

<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>

</BODY></HTML>

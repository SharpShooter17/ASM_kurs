<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: W³asne biblioteki</TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Tworzenie w³asnych bibliotek">
<META NAME="Keywords" CONTENT="biblioteka, lib, asm, assembler, asembler">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">

<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:48 GMT">
</HEAD><BODY>

<h1 class="nag">Pisanie w³asnych bibliotek w jêzyku asembler</h1>


<P>Pewnie zdarzy³o siê ju¿ wam us³yszeæ o kim¶ innym:<BR>
<q>Ale¿ on(a) jest ¶wietnym(±) programist±(k±)! Nawet pisze w³asne biblioteki!</q><BR>
Poka¿ê teraz, ¿e nie jest to trudne, nie wa¿ne jak przera¿aj±cym siê to mo¿e wydawaæ.
Osoby, które przeczytaj± ten artyku³ i zdobêd± troszkê wprawy bêd± mog³y mówiæ:<BR>
<q>Phi, a co to za filozofia pisaæ w³asne biblioteki!</q></P>

<P>Zacznijmy wiêc od pytania: co powinno siê znale¼æ w takiej bibliotece?<BR>
Mog± to byæ:</P>
<UL>
 <LI> Funkcje wej¶cia i wyj¶cia, podobnie jak na przyk³ad w jêzyku C</LI>
 <LI> Funkcje, które ju¿ przepisywali¶my ze 20 razy w ró¿nych programach</LI>
 <LI> Sprawdzone funkcje, napisane przez kogo¶ innego, których nie umieliby¶my sami
      napisaæ, lub które <q>po prostu mog± siê przydaæ</q></LI>
</UL>

<P>Co to za¶ jest to owa <q>biblioteka</q>?<BR>
Jest to plik (najczê¶ciej z rozszerzeniem .lib), na który sk³ada
siê skompilowany kod, a wiêc na przyk³ad pliki .obj. Biblioteka eksportuje na zewn±trz nazwy
procedur w niej zawartych, aby linker wiedzia³, jaki adres podaæ programowi, który chce
skorzystaæ z takiej procedury.</P>
<P>
Bêdê w tym artykule u¿ywa³ sk³adni i linii poleceñ Turbo Assemblera (TASMa) firmy Borland
z linkerem TLink i bibliotekarzem TLib oraz NASMa (<span lang="en">Netwide Assembler</span>) i FASMa
(<span lang="en">Flat Assembler</span> z linkerem ALink
i darmowym bibliotekarzem znalezionym w Internecie (patrz linki na dole strony).</P>
<P>
Napiszmy wiêc jaki¶ prosty kod ¼ród³owy. Oto on:</P>
	<BR><a href="#bibl_tut01" tabindex="1" class="bezdruk">(przeskocz przyk³adowy modu³ biblioteki)</a>
<PRE title="przyk³adowy modu³ biblioteki">
; wersja TASM

public _graj_dzwiek

biblioteka_dzwiek	segment	byte	public &quot;bibl&quot;
assume cs:biblioteka_dzwiek

_graj_dzwiek		proc	far



; wej¶cie:	BX = ¿±dana czêstotliwo¶æ d¼wiêku w Hz, co najmniej 19
;		CX:DX = czas trwania d¼wiêku w mikrosekundach
;
; wyj¶cie:	CF = 0 - wykonane bez b³êdów
;		CF = 1 - b³±d: BX za ma³y



czasomierz	equ	40h	;numer portu programowalnego czasomierza
klawiatura	equ	60h	;numer portu kontrolera klawiatury

	pushf			; zachowujemy modyfikowane rejestry
	push ax
	push dx
	push si


	cmp bx,19		;najni¿sza mo¿liwa czêstotliwo¶æ to ok. 18Hz
	jb _graj_blad


	in   al,klawiatura+1	; port B kontrolera klawiatury
	or   al,3		; ustawiamy bity: 0 i 1 - w³±czamy g³o¶nik i
				; bramkê od licznika nr. 2 czasomierza
				; do g³o¶nika
	out  klawiatura+1,al



	mov si,dx		;zachowujemy DX

	mov dx,12h
	mov ax,34ddh
	div bx			;AX = 1193181 / czêstotliwo¶æ, DX=reszta

	mov dl,al		;zachowujemy m³odszy bajt dzielnika
				; czêstotliwo¶ci



	mov al,0b6h

	out czasomierz+3,al	;wysy³amy komendê:
				; (bity 7-6) wybieramy licznik nr. 2,
				; (bity 5-4) bêdziemy pisaæ najpierw bity 0-7
				;		 potem bity 8-15
				;(bity 3-1) tryb 3:generator fali kwadratowej
				; (bit 0)    licznik binarny 16-bitowy

	mov al,dl		; odzyskujemy m³odszy bajt
	out czasomierz+2,al	; port licznika nr. 2 i bity 0-7 dzielnika
				; czêstotliwo¶ci
	mov al,ah
	out czasomierz+2,al	; bity 8-15

	mov dx,si		;odzyskujemy DX


_graj_pauza:
	mov ah,86h
	int 15h			; pauza o d³ugo¶ci CX:DX mikrosekund

	jnc _graj_juz
	dec dx
	sbb cx,0		; w razie b³êdu zmniejszamy CX:DX
	jmp short _graj_pauza

_graj_juz:

	in   al,klawiatura+1
	and  al,not 3		; zerujemy bity: 0 i 1 - wy³±czamy g³o¶nik
				; i bramkê
	out  klawiatura+1,al

	pop si			; przywracamy rejestry
	pop dx
	pop ax
	popf
	clc			; brak b³êdu

	retf


_graj_blad:
	pop si			; przywracamy rejestry
	pop dx
	pop ax
	popf
	stc			; b³±d

	retf

_graj_dzwiek		endp

biblioteka_dzwiek	ends
end</PRE>
<hr>
<P><a name="bibl_tut01" id="bibl_tut01">Teraz ten sam kod w sk³adni NASMa/FASMa</a>:</P>
	<BR><a href="#bibl_tut02" class="bezdruk">(przeskocz modu³ w sk³adni NASMa/FASMa)</a>
<PRE title="przyk³adowy modu³ biblioteki w sk³adni NASM/FASM">
; wersja NASM

global	_graj_dzwiek
; w FASMie:
;	format COFF
;	use16
; 	PUBLIC _graj_dzwiek

segment	biblioteka_dzwiek	; FASM: section &quot;.text&quot; code

_graj_dzwiek:



; wej¶cie:	BX = ¿±dana czêstotliwo¶æ d¼wiêku w Hz, co najmniej 19
;		CX:DX = czas trwania d¼wiêku w mikrosekundach
;
; wyj¶cie:	CF = 0 - wykonane bez b³êdów
;		CF = 1 - b³±d: BX za ma³y



czasomierz	equ	40h	;numer portu programowalnego czasomierza
klawiatura	equ	60h	;numer portu kontrolera klawiatury

	pushf
	push ax
	push dx
	push si


	cmp bx,19		;najni¿sza mo¿liwa czêstotliwo¶æ to ok. 18Hz
	jb _graj_blad


	in   al,klawiatura+1	; port B kontrolera klawiatury
	or   al,3		; ustawiamy bity: 0 i 1 - w³±czamy g³o¶nik i
				; bramkê od licznika nr. 2 czasomierza
				; do g³o¶nika
	out  klawiatura+1,al



	mov si,dx		;zachowujemy DX

	mov dx,12h
	mov ax,34ddh
	div bx			;AX = 1193181 / czêstotliwo¶æ, DX=reszta

	mov dl,al		;zachowujemy m³odszy bajt dzielnika
				; czêstotliwo¶ci



	mov al,0b6h

	out czasomierz+3,al	;wysy³amy komendê:
				; (bity 7-6) wybieramy licznik nr. 2,
				; (bity 5-4) bêdziemy pisaæ najpierw bity 0-7
				;		 potem bity 8-15
				;(bity 3-1) tryb 3:generator fali kwadratowej
				; (bit 0)    licznik binarny 16-bitowy

	mov al,dl		; odzyskujemy m³odszy bajt
	out czasomierz+2,al	; port licznika nr. 2 i bity 0-7 dzielnika
				; czêstotliwo¶ci
	mov al,ah
	out czasomierz+2,al	; bity 8-15

	mov dx,si		;odzyskujemy DX


_graj_pauza:
	mov ah,86h
	int 15h			; pauza o d³ugo¶ci CX:DX mikrosekund

	jnc _graj_juz
	dec dx
	sbb cx,0		; w razie b³êdu zmniejszamy CX:DX
	jmp short _graj_pauza

_graj_juz:

	in   al,klawiatura+1
	and  al,~3		; zerujemy bity: 0 i 1 - wy³±czamy g³o¶nik
				; i bramkê
				; w FASMie: <q>AND AL, not 3</q>
	out  klawiatura+1,al

	pop si
	pop dx
	pop ax
	popf
	clc

	retf


_graj_blad:
	pop si
	pop dx
	pop ax
	popf
	stc

	retf
</PRE>


<P><a name="bibl_tut02" id="bibl_tut02">Jest to moja procedura wytwarzaj±ca</a>
 d¼wiêk w g³o¶niczku (patrz <a href="spkr_tut.htm" hreflang="pl">artyku³ o programowaniu g³o¶niczka</a>).
Trochê tego jest, co? Ale jest tu du¿o spraw, które mo¿na omówiæ.</P>

<P>Zacznijmy wiêc po kolei:</P>
<OL>
 <LI> <CODE lang="en">public... / global...</CODE><BR>
      <P>Funkcje, które maj± byæ <q>widoczne na zewn±trz</q> tego pliku, a wiêc mo¿liwe do u¿ycia przez
      inne programy, musz± byæ zadeklarowane jako <q lang="en">public</q> (TASM/FASM)
       (w NASMie: <q lang="en">global</q>). To jest <q>na wszelki wypadek</q>.
      Niektóre kompilatory domy¶lnie traktuj± wszystkie symbole jako publiczne, inne nie.
      Je¶li w programie bêdziemy chcieli korzystaæ z takiej funkcji, nale¿y j± zadeklarowaæ
      jako <q>extrn</q> (TASM/FASM) lub <q>extern</q> (NASM).
	</P></LI>
 <LI> Deklaracja segmentu<BR>
      <P>¯aden przyzwoity kompilator nie pozwoli na pisanie kodu poza jakimkolwiek segmentem
      (no chyba, ¿e domy¶lnie zak³ada segment kodu, jak NASM).
      Normalnie, w <q>zwyk³ych</q> programach, np typu .com, rolê tê pe³ni dyrektywa
      <q lang="en">.code</q>.
	</P></LI>
 <LI> <CODE>assume</CODE> <BR>
      <P>Mówimy kompilatorowi, ¿e rejestr CS bêdzie wskazywa³ na ten segment</P></LI>
 <LI> Gwiazdki lub inne elementy oddzielaj±ce (tu usuniête)<BR>
      <P>Mog± siê wydawaæ ¶mieszne lub niepotrzebne, ale gdy liczba procedur w pliku zaczyna
      siêgaæ 10-20, to NAPRAWDÊ zwiêkszaj± czytelno¶æ kodu, oddzielaj±c procedury, dane itd.
	</P></LI>
 <LI> Deklaracja procedury (wcze¶niej zadeklarowanej jako publiczna)<BR>
      <P>Znak podkre¶lenia z przodu jest tylko po to, by w razie czego nie by³ identyczny z jak±¶
      etykiet± w programie korzystaj±cym z biblioteki. Deklaracja jest typu <q>far</q>, ¿eby
      zmieniæ CS na bie¿±cy segment i unikn±æ k³opotów z 64kB limitem d³ugo¶ci skoku
      (konkretnie to s± to +/- 32kB).</P></LI>
 <LI> To, czego procedura oczekuje i to, co zwraca.<BR>
      <P>Jedn± procedurê ³atwo zapamiêtaæ. Ale co zrobiæ, gdy jest ich ju¿ 100? Analizowaæ kod ka¿dej,
      aby sprawdziæ, co robi, bo akurat szukamy takiej jednej....? No przecie¿ nie.</P></LI>
 <LI> Dobr± technik± programowania jest deklaracja sta³ych w stylu <q>equ</q> (lub #define w C).
      <P>Zamiast nic nie znacz±cej liczby mo¿na u¿yæ wiele znacz±cego zwrotu, co przyda siê dalej
      w kodzie. I nie kosztuje to ani jednego bajtu. Oczywi¶cie, ukrywa to czê¶æ kodu (tutaj:
      numery portów), ale w razie potrzeby zmienia siê tê wielko¶æ tylko w 1 miejscu, a nie
      w 20.</P></LI>
 <LI> <CODE>push...</CODE><BR>
      <P>Poza warto¶ciami zwracanymi nic nie mo¿e byæ zmienione! Nieprzyjemnym uczuciem by³oby
      spêdzenie kilku godzin przy odpluskwianiu (debugowaniu) programu tylko dlatego, ¿e kto¶
      zapomnia³ zachowaæ jakiego¶ rejestru, prawda?</P></LI>
 <LI> Sprawdzanie warunków wej¶cia, czy s± prawid³owe. Zawsze nale¿y wszystko przewidzieæ.
	<BR><BR></LI>
 <LI> Kod procedury. Z punktu widzenia tego artyku³u jego tre¶æ jest dla nas nieistotna.
	<BR><BR></LI>
 <LI> Punkt(y) wyj¶cia<BR>
      <P>Procedura mo¿e mieæ dowolnie wiele punktów wyj¶cia. Tutaj zastosowano
      dwa, dla dwóch ró¿nych sytuacji:</P>
      <OL>
       <LI> parametr by³ dobry, procedura zakoñczy³a siê bez b³êdów</LI>
       <LI> parametr by³ z³y, zwróæ informacjê o b³êdzie</LI>
      </OL><BR></LI>
 <LI> Koniec procedury, segmentu i pliku ¼ród³owego. S³owo <q>end</q> nie zawsze jest konieczne, ale
      nie zaszkodzi. Wskazuje, gdzie nale¿y skoñczyæ przetwarzanie pliku.<BR><BR></LI>
</OL>

<P>Mamy wiêc ju¿ plik ¼ród³owy. Co z nim zrobiæ? Skompilowaæ, oczywi¶cie!</P>
<PRE>	tasm naszplik.asm /z /m</PRE>
<P>(/z - wypisz liniê, w której wyst±pi³ b³±d<BR>
  /m - pozwól na wielokrotne przej¶cia przez plik)<BR>
lub, dla NASMa:</P>
<PRE>	nasm -f obj -o naszplik.obj naszplik.asm</PRE>
<P>(-f - okre¶l format pliku wyj¶ciowego<BR>
  -o - okre¶l nazwê pliku wyj¶ciowego)<BR>
lub, dla FASMa:</P>
<PRE>	fasm naszplik.asm naszplik.obj</pre>

<P>
Mamy ju¿ plik <q>naszplik.obj</q>. W pewnym sensie on ju¿ jest bibliotek±! I mo¿na go u¿ywaæ w innych
programach, na przyk³ad w pliku <q>program2.asm</q> mamy:</P>
<PRE>
	...
	extrn _graj_dzwiek:far		; NASM: extern _graj_dzwiek
					; FASM: extrn _graj_dzwiek

		...
		...
		mov bx,440
		mov cx,0fh
		mov dx,4240h
		call far ptr _graj_dzwiek ; NASM: call far _graj_dzwiek
					; FASM: call _graj_dzwiek
		...</PRE>

<P>I mo¿emy teraz zrobiæ:</P>
<PRE>
	tasm program2.asm /z /m
	tlink program2.obj naszplik.obj</PRE>
<P>lub, dla NASMa:</P>
<PRE>
	nasm -f obj -o program2.obj program2.asm
	alink program2.obj naszplik.obj -c- -oEXE -m-</PRE>
<p>lub, dla FASMa:</P>
<PRE>
	fasm program2.asm program2.obj
	alink program2.obj naszplik.obj -c- -oEXE -m-</PRE>


<P>a linker zajmie siê wszystkim za nas - utworzy plik <q>program2.exe</q>, zawieraj±cy tak¿e
<q>naszplik.obj</q>. Jaka z tego korzy¶æ? Plik <q>program2.asm</q> mo¿e bêdzie zmieniany w przysz³o¶ci
wiele razy, ale <q>naszplik.asm/.obj</q> bêdzie ci±gle taki sam. A w razie chêci zmiany procedury
_graj_dzwiek wystarczy j± zmieniæ w 1 pliku i tylko jego ponownie skompilowaæ, bez potrzeby
wprowadzania tej samej zmiany w kilkunastu innych programach. Te programy wystarczy
tylko ponownie skompilowaæ z now± <q>bibliotek±</q>, bez jakichkolwiek zmian kodu.</P>

<P>
No dobra, ale co z plikami .lib?<BR>
Otó¿ s± one odpowiednio po³±czonymi plikami .obj. I wszystko dzia³a tak samo.<BR>
<BR>Ale jak to zrobiæ?<BR>
S³u¿± do tego specjalne programy, nazywane <q lang="en">librarian</q> (bibliotekarz). W pakiecie TASMa
znajduje siê program <q>tlib.exe</q>. Jego w³a¶nie u¿yjemy (dzia³a jak LLIB i wszystko
robimy tak samo). Pliki .obj, które chcemy po³±czyæ w
bibliotekê mo¿na podawaæ na linii poleceñ, ale jest to mêcz±ce, nawet je¶li napisze siê plik
wsadowy <q>tlib.bat</q> uruchamiaj±cy tlib. My skorzystamy z innego rozwi±zania.<BR>
 Programowi mo¿na na linii poleceñ podaæ, aby komendy czyta³ z jakiego¶ pliku. I to w³a¶nie
zrobimy. Piszemy plik <q>tlib.bat</q>:</P>
<PRE>	tlib.exe naszabibl.lib @lib.txt</PRE>
<P>i plik <q>lib.txt</q> (zwyk³ym edytorem tekstu):</P>

<PRE>
	+- ..\obj\pisz.obj &amp;
	+- ..\obj\wej.obj &amp;
	+- ..\obj\procesor.obj &amp;
	+- ..\obj\losowe.obj &amp;
	+- ..\obj\f_pisz.obj &amp;

	+- ..\obj\dzwiek.obj &amp;
	+- ..\obj\f_wej.obj &amp;
	+- ..\obj\fn_pisz.obj &amp;
	+- ..\obj\fn_wej.obj</PRE>

<P>(u¿y³em tutaj nazw modu³ów, które sk³adaj± siê na moj± bibliotekê).<BR>
<q>+-</q> oznacza <q>zamieñ w pliku dany modu³</q><BR>
<q>&amp;</q>  oznacza <q>sprawdzaj jeszcze w kolejnej linijce</q><BR>
Przy pierwszym tworzeniu mo¿na u¿yæ <q>+</q> zamiast <q>+-</q>, aby unikn±æ ostrze¿eñ o uprzedniej
nieobecno¶ci danego modu³u w bibliotece.<BR>
Teraz uruchamiamy ju¿ tylko <q>tlib.bat</q> a w razie potrzeby zmieniamy tylko <q>lib.txt</q>.</P>

<P>
Gdzie zdobyæ narzêdzia:</P>
<OL>
 <LI> <A HREF="http://sourceforge.net/projects/nasm" hreflang="en"
 	 >NASM</A>
 	 </LI>
 <LI><A HREF="http://alink.sf.net/" hreflang="en">Alink</A></LI>
 <LI>Lib (LLIB, a <em class="wazne">nie</em> ten z pakietu Borlanda czy
 	<span lang="en">Microsoft</span>-u):<BR>
	 <A HREF="http://www.dunfield.com/downloads.htm" hreflang="en"
	 >www.dunfield.com/downloads.htm</A> (szukaj SKLIB31.ZIP)<BR>
	<A HREF="http://www2.inf.fh-rhein-sieg.de/~skaise2a/ska/sources.html" hreflang="en"
	>www2.inf.fh-rhein-sieg.de/~skaise2a/ska/sources.html</A><BR>
	Je¶li tam go nie ma, to poszukajcie na stronach
	<A HREF="http://www.freedos.org" hreflang="en" lang="en">FreeDOS</a>-a
  	</LI>
</OL>

<P> Kopia mojej biblioteki powinna znajdowaæ siê na stronach, gdzie znale¼li¶cie ten kurs.
</P>

<P>Mi³ej zabawy.</P>

<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>


</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: Rozpoznawanie typu procesora </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Rozpoznawanie typu procesora">
<META NAME="Keywords" CONTENT="assembler, asm, asembler, CPU, procesor, CPUID, koprocesor, FPU">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:48 GMT">
</HEAD><BODY>

<h1 class="nag">Rozpoznawanie typu procesora</h1>

	<BR><a href="#cpu_tut01" tabindex="1" class="bezdruk">(przeskocz wykrywanie procesora)</a>

<P>
Jak zapewne wiecie, wiele programów (systemy operacyjne, gry, ...) potrafi jako¶
 <q>dowiedzieæ siê</q>, na jakim procesorze zosta³y uruchomione. Rozpoznanie typu procesora
 umo¿liwia na przyk³ad uruchomienie dodatkowych optymalizacji w programie lub odmowê dalszego
 dzia³ania, je¶li program musi korzystaæ z instrukcji niedostêpnych na danym procesorze.
</P>
<P>
 Wykrywanie rodzaju
 <acronym lang="en" title="Central Processing Unit">CPU</acronym> i
 <acronym lang="en" title="Floating-Point Unit">FPU</acronym> nie jest trudne i
 poka¿ê teraz, jak po kolei sprawdzaæ
 typ procesora (nie mo¿na przecie¿ zacz±æ sprawdzania od najwy¿szych).<BR>
</P>
<P>
 Informacje, które tutaj podam, s± oczywi¶cie s³uszne dla wszystkich procesorów
 rodziny x86 (<acronym title="Advanced Micro Devices" lang="en">AMD</acronym>, Cyrix, ...),
 a nie tylko Intela.
</P>
<P>
Generalnie sposoby wykrywania s± dwa: poprzez rejestr FLAG lub poprzez zakodowanie w kodzie
 instrukcji, które wykonaj± siê tylko na danym modelu (i pó¼niejszych).
</P>
<P>
Drugi sposób jest trochê trudniejszy:
 nale¿y przej±æ przerwanie INT6 (nieprawid³owa instrukcja) i sprawdzaæ, kiedy zosta³o wywo³ane.</P>

<OL>
 <LI>odró¿nienie 8088 od reszty
	<BR><a href="#p8086" class="bezdruk">(przeskocz 8088)</a>
	<P>
 	Procesor 8088 od pozosta³ych odró¿nia to, ¿e zmniejsza on rejestr SP przed umieszczeniem
 	go na stosie. Reszta robi to po umieszczeniu SP na stosie. Kod wygl±da³by wiêc na przyk³ad tak:</P>
	<a href="#p8086" class="bezdruk">(przeskocz kod dla 8088)</a>
 	<PRE>
		mov	ax, sp
		push	sp
		pop	cx
		xor	ax, cx		; lub cmp ax, cx
		jz	nie_8088</PRE>
	</LI>

 <LI><a name="p8086" id="p8086">8086</a>
	<BR><a href="#p186" class="bezdruk">(przeskocz 8086)</a>
 	<P>
 	Na tym procesorze w rejestrze flag bity 12-15 zawsze maj± warto¶æ 1.</P>
	<a href="#p186" class="bezdruk">(przeskocz kod dla 8086)</a>
 	<PRE>
		pushf			; flagi na stos
		pop	ax		; AX = flagi
		and	ax, 0fffh	; czy¶cimy bity 12-15
		push	ax		; AX na stos
		popf			; flagi = AX
		pushf			; z powrotem na stos
		pop	ax		; AX = flagi
		and	ax, 0f000h	; zerujemy bity poza bitami 12-15
		cmp	ax, 0f000h	; je¶li ustawione, to 8086
		jz	jest_8086</PRE>
	</LI>

 <LI><a name="p186" id="p186">80186</a>
	<BR><a href="#p286" class="bezdruk">(przeskocz 80186)</a>
 	<P>
 	Test polega na próbie wykonania instrukcji <q>smsw dx</q>, nieprawid³owej
 	 na procesorach wcze¶niejszych
 	 ni¿ 80286. Przerwanie nieprawid³owej instrukcji przejmujemy tak:</P>
	<a href="#p286" class="bezdruk">(przeskocz kod dla 80186)</a>
 	 <PRE>
		xor	ax, ax
		mov	es, ax

		les	bx, [es:6 &lt;&lt; 2]	; FASM: les bx, [es:(6 shl 2)]

		mov	[_stare06+2], es
		mov	[_stare06], bx

		mov	es, ax
		mov	word [es:(6 &lt;&lt; 2)], moje06
			; FASM: mov word [es:(6 shl 2)], moje06
		mov	word [es:(6 &lt;&lt; 2) + 2], seg moje06
			; FASM: mov word [es:(6 shl 2)], seg moje06</PRE>
	<P>Sama procedura obs³ugi przerwania wygl±daæ bêdzie tak:</P>
	<PRE>
		moje06:
			pop	ax
			add	ax, 3
			push	ax
			xor	ax, ax
			iret</PRE>
	<P>Proste: zwiêkszamy adres powrotny o 3 (d³ugo¶æ instrukcji <q>smsw dx</q>) i zerujemy AX
	 (potem w kodzie sprawdzimy jego warto¶æ). Sam kod sprawdzaj±cy wygl±da tak:</P>
	<PRE>
		mov	ax, 1
		db	0fh, 1, 0e2h		; smsw dx
		or	ax, ax
		jz	jest_286</PRE>
	<P>
	Przywrócenie oryginalnej procedury wygl±da tak:</P>
	<PRE>
		xor	ax, ax
		les	cx, [_stare06]
		mov	ds, ax
		mov	[ds:(6 &lt;&lt; 2)], cx
			; FASM: mov [ds:(6 shl 2)], cx
		mov	[ds:(6 &lt;&lt; 2) + 2], es
			; FASM: mov [ds:(6 shl 2) + 2], es</PRE></LI>

 <LI><a name="p286" id="p286">80286</a>
	<BR><a href="#p386" class="bezdruk">(przeskocz 80286)</a>
 	<P>
 	Na tym procesorze bity 12-15 flag zawsze maj± warto¶æ 0. Przyk³adowy kod wygl±da wiêc tak:</P>
	<a href="#p386" class="bezdruk">(przeskocz kod dla 80286)</a>
 	<PRE>
		pushf				; flagi na stos
		pop	ax			; AX = flagi
		or	ax, 0f000h		; ustawiamy bity 12-15
		push	ax			; AX na stos
		popf				; flagi = AX
		pushf				; flagi na stos
		pop	ax			; AX = flagi
		and	ax, 0f000h	; je¶li wyczyszczone, to 286
		jnz	nie_286</PRE>
	</LI>

 <LI><a name="p386" id="p386">80386</a>
	<BR><a href="#p486" class="bezdruk">(przeskocz 80386)</a>
 	<P>
 	Na tym procesorze nie mo¿na zmieniæ bitu numer 18 we flagach (wiemy, ¿e rejestr flag ma 32 bity).
 	Bit ten odpowiada za Alignment Check i spowoduje przerwanie m.in wtedy, gdy SP nie bêdzie podzielne przez 4.
 	Dlatego, zanim bêdziemy testowaæ ten bit, musimy zachowaæ SP i wyzerowaæ jego najm³odsze 2 bity.</P>
	<a href="#p486" class="bezdruk">(przeskocz kod dla 80386)</a>
 	<PRE>
		mov	dx, sp
		and	sp, ~3		; aby unikn±æ AC fault.
					; FASM: and sp, not 3
		pushfd			; flagi na stos
		pop	eax		; EAX = E-flagi
		mov	ecx, eax	; zachowanie EAX
		xor	eax, 40000h	; zmiana bitu 18
		push	eax		; EAX na stos
		popfd			; E-flagi = EAX
		pushfd			; flagi na stos
		pop	eax		; EAX = flagi
		xor	eax, ecx  ; czy takie same? je¶li tak, to 386
		mov	sp, dx		; przywrócenie SP
		jz	jest_386</PRE>
	</LI>

 <LI><a name="p486" id="p486">80486</a>
	<BR><a href="#p586" class="bezdruk">(przeskocz 80486)</a>
 	<P>
 	Na tym procesorze nie mo¿na zmieniæ bitu 21 we flagach. Je¶li ten bit mo¿na zmieniæ, to
 	procesor obs³uguje instrukcjê <code lang="en">CPUID</code>, której bêdziemy u¿ywaæ do
	dalszego rozpoznania. Kod:</P>
	<a href="#p586" class="bezdruk">(przeskocz kod dla 80486)</a>
 	<PRE>
		pushfd			; flagi na stos
		pop	eax		; EAX = E-flagi
		mov	ecx, eax	; zachowanie EAX
		xor	eax, 200000h	; zmiana bitu 21
		push	eax		; EAX na stos
		popfd			; E-flagi = EAX
		pushfd			; flagi na stos
		pop	eax		; EAX = flagi
		xor	eax, ecx  ; czy takie same? je¶li tak, to 486
		jz	jest_486
		jmp	jest_586</PRE>
	</LI>
</OL>
<P><a name="p586" id="p586">Zanim omówiê sposób</a> korzystania z instrukcji <code lang="en">CPUID</code>,
 zajmijmy siê sposobem rozpoznania typu koprocesora.</P>







<BR>
<HR>
<h2 class="nag"><a name="cpu_tut01" id="cpu_tut01">Koprocesor</a></h2>

	<BR><a href="#cpu_tut02" class="bezdruk">(przeskocz wykrywanie koprocesora)</a>

<P>
 Tutaj mo¿liwo¶ci s± tylko cztery: brak koprocesora, 8087, 80287, 80387. No to do roboty.</P>

<OL>
 <LI>czy w ogóle jest jaki¶ koprocesor?
	<BR><a href="#p8087" class="bezdruk">(przeskocz test na istnienie FPU)</a>
	<P>
 	To sprawdzamy bardzo ³atwo. Je¶li nie ma koprocesora, to w chwili wykonania instrukcji FPU mo¿e wyst±piæ przerwanie INT6
 	(nieprawid³owa instrukcja), ale nie o tym sposobie chcia³em powiedzieæ. Koprocesor mo¿na wykryæ,
 	je¶li s³owo stanu zostanie zapisane prawid³owo. Oto kod:</P>
	<a href="#p8087" class="bezdruk">(przeskocz test na istnienie FPU)</a>
 	<PRE>
		fninit			; inicjalizacja zeruje rejestry

  		; wpisujemy jak±¶ niezerowa warto¶æ:
  		mov	word [_fpu_status], 5a5ah

		; zapisz s³owo statusowe do pamiêci:
		fnstsw	[_fpu_status]
		mov	ax, [_fpu_status]
		or	al, al	; je¶li zapisa³o dobrze (zera oznaczaj±
				; puste rejestry), to jest FPU

		jz	jest_FPU</PRE>
	</LI>

 <LI><a name="p8087" id="p8087">8087</a>
	<BR><a href="#p287" class="bezdruk">(przeskocz 8087)</a>
 	<P>
	Sztuczka polega na wykorzystaniu instrukcji FDISI (wy³±czenie przerwañ), która rzeczywi¶cie
	co¶ robi tylko na 8087.
	 Po wy³±czeniu przerwañ w s³owie kontrolnym zostaje w³±czony bit numer 7.</P>
	<a href="#p287" class="bezdruk">(przeskocz kod dla 8087)</a>
	<PRE>
		; zachowaj s³owo kontrolne do pamiêci:
		fnstcw	[_fpu_status]

		; wy³±czamy wszystkie
		; przerwania (poprzez s³owo kontrolne):
		and	word [_fpu_status], 0ff7fh

		; za³aduj s³owo kontrolne z pamiêci:
		fldcw	[_fpu_status]

		fdisi		; wy³±czamy wszystkie przerwania
				; (jako instrukcja)

		; zachowaj s³owo kontrolne do pamiêci:
		fstcw	[_fpu_status]
		test	byte [_fpu_status], 80h	; bit 7 ustawiony?

		jz	nie_8087	; je¶li nie, to nie jest to 8087</PRE>
	</LI>

 <LI><a name="p287" id="p287">80287</a>
	<BR><a href="#cpu_tut02" class="bezdruk">(przeskocz 80287)</a>
 	<P>
 	Koprocesor ten nie odró¿nia minus nieskoñczono¶ci od plus nieskoñczono¶ci. Kod na sprawdzenie
	tego wygl±da tak:</P>
	<a href="#cpu_tut02" class="bezdruk">(przeskocz kod dla 80287)</a>
 	 <PRE>
		finit

		fld1		; st(0)=1
		fldz		; st(0)=0,st(1)=1
		fdivp	st1	; tworzymy nieskoñczono¶æ,
				; dziel±c przez 0
		fld	st0	; st(1):=st(0)=niesk.
		fchs		; st(0)= -niesk.

				; porównanie st0 z st1 i
				; zdjêcie obu ze stosu
		fcompp		; 8087/287: -niesk. = +niesk.,
				; 387: -niesk. != +niesk.

		fstsw	[_fpu_status]	; zapisz status do pamiêci
		mov	ax, [_fpu_status]	; AX = status

		sahf		; zapisz AH we flagach. tak sie sk³ada,
				; ¿e tutaj równie¿ flaga ZF wskazuje na
				; równo¶æ argumentów.
		jz	jest_287
		jmp	jest_387</PRE>
	</LI>
</OL>








<BR>
<HR>
<h2 class="nag"><a name="cpu_tut02" id="cpu_tut02">Dalsze informacje o procesorze</a> - instrukcja
 <span lang="en">CPUID</span></h2>

<P>
Od procesorów 586 (choæ niektóre 486 te¿ podobno j± obs³ugiwa³y), Intel i inni wprowadzili
 instrukcjê <code lang="en">CPUID</code>. Pozwala ona odczytaæ wiele ró¿nych
 informacji o procesorze (konkretny typ,
 rozmiary pamiêci podrêcznych, dodatkowe rozszerzenia, ...).<BR>
Korzystanie z tej instrukcji jest bardzo proste: do EAX wpisujemy numer (0-3)
 i wywo³ujemy instrukcjê, na przyk³ad</P>
<PRE>
	mov	eax, 1
	cpuid</PRE>

<P>Teraz omówiê, co mo¿na dostaæ przy ró¿nych warto¶ciach EAX.</P>
<OL>
 <LI>EAX=0
	<BR><a href="#cpu_tut03" class="bezdruk">(przeskocz EAX=0)</a>
 	<P>
 	EAX = maksymalny numer funkcji dla <code lang="en">CPUID</code>.<BR>
 	EBX:EDX:ECX = marka procesora (12 znaków ASCII).<BR>
 	Intel - <q lang="en">GenuineIntel</q><BR>
 	AMD - <q lang="en">AuthenticAMD</q><BR>
 	NexGen - <q lang="en">NexGenDriven</q><BR>
 	Cyrix, VIA - <q lang="en">CyrixInstead</q><BR>
 	RISE - <q lang="en">RiseRiseRise</q>,<BR>
 	Centaur Technology/IDT - <q lang="en">CentaurHauls</q> (programowalne, mo¿e byæ inne)<BR>
 	United Microelectronics Corporation - <q lang="en">UMC UMC UMC </q><BR>
 	Transmeta Corporation - <q lang="en">GenuineTMx86</q><BR>
 	SiS - <q lang="en">SiS SiS SiS </q><BR>
 	National Semiconductor - <q lang="en">Geode by NSC</q>.
 	</P></LI>

 <LI><a name="cpu_tut03" id="cpu_tut03">EAX=1</a>
	<BR><a href="#cpu_tut04" class="bezdruk">(przeskocz EAX=1)</a>
 	<P>
 	EAX = informacje o wersji:</P>
	<UL>
	 <LI>bity 0-3: <span lang="en">stepping ID</span></LI>
	 <LI>bity 4-7: model</LI>
	 <LI>bity 8-11: rodzina. Warto¶ci mog± byæ od 4 (80486) do 7 (Itanium) oraz 15
	 	 (co znaczy <q>sprawd¼ rozszerzone informacje o rodzinie</q>)</LI>
	 <LI>bity 12-13: typ procesora (0=<span lang="en">Original OEM Processor</span>,
	 	 1=<span lang="en">Intel Overdrive</span>, 2=<span lang="en">Dual</span>)</LI>
	 <LI>bity 16-19 (je¶li jest taka mo¿liwo¶æ): rozszerzona informacja o modelu.</LI>
	 <LI>bity 20-27 (je¶li jest taka mo¿liwo¶æ): rozszerzona informacja o rodzinie.</LI>
	</UL>
	<P>EDX = cechy procesora (tutaj akurat z procesorów Intela; najpierw numery bitów):</P>
	<UL>
	 <LI>0: procesor zawiera FPU</LI>
	 <LI>1: <span lang="en">Virtual 8086 Mode Enchancements</span></LI>
	 <LI>2: <span lang="en">Debugging Extensions</span></LI>
	 <LI>3: <span lang="en">Page Size Extension</span></LI>
	 <LI>4: <span lang="en">Time Stamp Counter</span></LI>
	 <LI>5: <span lang="en">Model Specific Registers</span></LI>
	 <LI>6: <span lang="en">Physical Address Extensions</span></LI>
	 <LI>7: <span lang="en">Machine Check Exception</span></LI>
	 <LI>8: instrukcja <code>CMPXCHG8B</code></LI>
	 <LI>9: procesor zawiera Zaawansowany Programowalny Kontroler Przerwañ (APIC)</LI>
	 <LI>11: instrukcje <code>SYSENTER</code> i <code>SYSEXIT</code></LI>
	 <LI>12: <span lang="en">Memory Type Range Registers</span></LI>
	 <LI>13: <span lang="en">Page Table Entries Global Bit</span></LI>
	 <LI>14: <span lang="en">Machine Check Architecture</span></LI>
	 <LI>15: instrukcje <code>CMOV*</code></LI>
	 <LI>16: <span lang="en">Page Attribute Table</span></LI>
	 <LI>17: <span lang="en">32-bit Page Size Extensions</span></LI>
	 <LI>18: numer seryjny procesora</LI>
	 <LI>19: instrukcja <code>CLFLUSH</code></LI>
	 <LI>21: <span lang="en">Debug Store</span></LI>
	 <LI>22: monitorowanie temperatury i mo¿liwo¶æ modyfikacji wydajno¶ci procesora</LI>
	 <LI>23: technologia MMX</LI>
	 <LI>24: instrukcje <code>FXSAVE</code> i <code>FXRSTOR</code></LI>
	 <LI>25: technologia SSE</LI>
	 <LI>26: technologia SSE2</LI>
	 <LI>27: <span lang="en">Self-Snoop</span></LI>
	 <LI>28: technologia <span lang="en">Hyper-Threading</span></LI>
	 <LI>29: monitorowanie temperatury, uk³ady kontroli temperatury</LI>
	 <LI>31: <span lang="en">Pending Break Enable</span></LI>
	</UL>
	<BR></LI>

 <LI><a name="cpu_tut04" id="cpu_tut04">EAX=2</a><BR>
 	<P>EBX, ECX, EDX = informacje o pamiêci podrêcznej cache i TLB</P></LI>
</OL>
<P>
Nawet te informacje, które tu przedstawi³em s± ju¿ bardzo szczegó³owe i z pewno¶ci± nie bêd±
 takie same na wszystkich procesorach. To jest tylko wstêp. Dalsze informacje mo¿na znale¼æ
  na stronach producentów procesorów, na przyk³ad
<A class="amd_link" href="http://developer.amd.com/Resources/documentation/guides/Pages/default.aspx" hreflang="en">AMD</A>,
<A class="intel_link" href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" hreflang="en">Intel</A>,
ale tak¿e tutaj:
<A HREF="http://www.sandpile.org/ia32/cpuid.htm" hreflang="en">Sandpile</A>,
<A HREF="http://www.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html" hreflang="en"
	>Lista przerwañ Ralfa <span lang="en">Brown</span>'a</A> (plik opcodes.lst).</P>


<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>


</BODY></HTML>

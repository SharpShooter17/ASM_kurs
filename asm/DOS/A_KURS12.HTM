<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS, czê¶æ 12 - Linia poleceñ i ¶rodowisko </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Prev"     hreflang="pl" lang="en" href="a_kurs11.htm">
<link rel="Next"     hreflang="pl" lang="en" href="a_kurs13.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Kurs jêzyka asembler">
<META NAME="Keywords" CONTENT="kurs, asm, asembler, assembler, linia poleceñ, PSP, ¶rodowisko,
	command line, environment">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:48 GMT">
</HEAD><BODY>

<div class="c">Jak pisaæ programy w jêzyku asembler?<BR>
	<h1 class="nag">Czê¶æ 12 - Czego od nas pragn±, czyli linia poleceñ programu.
	 Zmienne ¶rodowiska</h1></div>

<P>
Teraz zajmiemy siê do¶æ istotn± spraw± z punktu widzenia programisty i u¿ytkownika
oprogramowania: lini± poleceñ. Nie wszyscy lubi± podawaæ dane programowi w czasie jego
pracy i odpowiadaæ na pytania o dane. Czêsto (o ile jest to mo¿liwe) mo¿na
tego oszczêdziæ i zamiast bezustannie zadawaæ u¿ytkownikowi pytania, przeczytaæ, co wpisano
nam w liniê poleceñ. Umo¿liwia to pisanie programów, które raz uruchomione z prawid³ow± lini±
poleceñ nie pytaj± ju¿ siê o nic a tylko wykonuj± swoj± pracê bez przeszkadzania
u¿ytkownikom.
</P>
<P>
Przejd¼my wiêc do szczegó³ów. Wszystkie operacje, które wykonamy, bêd± siê opieraæ na
za³o¿eniu, ¿e w swoim programie nie zrobili¶cie absolutnie nic z rejestrem DS. Je¶li go
zmienili¶cie, to u¿yjcie tej funkcji (opis oczywi¶cie z
<A HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html" hreflang="en"
	>Listy Przerwañ Ralfa <span lang="en">Brown</span>'a</A>):</P>
	<BR><a href="#a_kurs1201" tabindex="1" class="bezdruk">(przeskocz int 21h, ah=62h)</a>
<PRE lang="en" title="int 21h, ah=62h">
	INT 21 - DOS 3.0+ - GET CURRENT PSP ADDRESS
        	AH = 62h
	Return: BX = segment of PSP for current process</PRE>
<P><a name="a_kurs1201" id="a_kurs1201">i otrzyman± w BX warto¶æ wpiszcie do DS</a>.
</P>
<P>
Maj±c oryginalny DS (wtedy pokazuje on na <span lang="en">Program Segment Prefix</span> - PSP),
 mo¿na w nim znale¼æ wiele ciekawych informacji:</P>
<UL>
 <LI>bajt pod [ds:80h] mówi nam, ile znaków znajduje siê na linii poleceñ, bez koñcz±cego
	znaku nowej linii (Enter = 13 ASCII).
	<BR><BR></LI>
 <LI>od [ds:81h] do [ds:0FFh] jest linia poleceñ. Jak widaæ, ma ona d³ugo¶æ 128 znaków i tylko
	tyle mo¿emy wpisaæ, uruchamiaj±c nasz program. Teraz równie¿ widaæ, dlaczego programy
	typu COM zaczynaj± siê od adresu 100h - po prostu wcze¶niej nie mog±, bo CS=DS.
	<BR><BR></LI>
 <LI>pod [ds:2ch] znajduje siê numer segmentu, w którym umieszczono kopiê zmiennych
	¶rodowiskowych (tych ustawianych komend± SET, na przyk³ad w autoexec.bat) do wykorzystania
	przez nasz program. Zmienne ¶rodowiskowe zapisane s± od pocz±tku segmentu i oddzielone
	od siebie bajtami zerowymi. Dwa bajty zerowe pod rz±d oznaczaj± koniec zmiennych.
	</LI>
</UL>
<P>Wszystko ³adnie wygl±da w teorii, ale jak tego u¿ywaæ?
Aby odpowiedzieæ na to pytanie, napisa³em ten oto krótki programik. Jedynym celem jego ¿ycia
jest wy¶wietlenie d³ugo¶ci jego linii poleceñ, samej linii poleceñ, numerów segmentów: kodu,
danych i ¶rodowiska (dla porównania), oraz samych zmiennych ¶rodowiskowych (je¶li wy¶wietla
siê za du¿o lub za ma³o, mo¿na zmieniæ liczbê na koñcu programu - poka¿ê, któr±).</P>

<P>Oto kod (NASM):</P>
	<BR><a href="#a_kurs1202" class="bezdruk">(przeskocz kod programu)</a>
<PRE>
; Program wy¶wietla w³asn± liniê poleceñ i zmienne ¶rodowiskowe.
;
; Autor: Bogdan D.
; kontakt: bogdandr (at) op (dot) pl
;
; kompilacja NASM:
;   nasm -O999 -o liniap.obj -f obj liniap.asm
;   alink liniap.obj  bibl\lib\bibldos.lib -c- -oEXE -m-
; kompilacja FASM (stary format biblioteki - OMF):
;   fasm liniap.asm liniap.obj
;   alink liniap.obj  bibl\lib\bibldos.lib -c- -entry _start -oEXE -m-
; kompilacja FASM (nowy format biblioteki - COFF):
;   fasm liniap.asm liniap.obj
;   ld -s -o liniap.exe liniap.obj bibl\lib\bibldos.a

; do³±czamy moj± biblioteczkê
%include &quot;bibl\incl\dosbios\nasm\std_bibl.inc&quot;
%include &quot;bibl\incl\dosbios\nasm\do_nasma.inc&quot;

.stack 400h			; program typu EXE musi mieæ stos

; FASM (stary format biblioteki - OMF):
; format coff
; include &quot;bibl\incl\dosbios\fasm\std_bibl.inc&quot;
; use16
; public start
; public _start
; i nic poza tym

; FASM (nowy format biblioteki - COFF):
; format coff
; include &quot;bibl\incl\dosbios\fasm32\std_bibl.inc&quot;
; public start
; public _start
; i nic poza tym


start:
_start:
..start:			; miejsce startu programu
	mov	si, 80h	; [ds:80h] - d³ugo¶æ linii poleceñ bez Entera
	xor	eax, eax
	mov	al, [si]	; AL = d³ugo¶æ linii poleceñ
	pisz
	db	&quot;Dlugosc linii polecen: &quot;, 0
	pisz8			; wypisujemy AL
	nwln			; przechodzimy do nowej linii

	mov	cx, ax		; CX=d³ugo¶æ linii poleceñ,
				; aby¶my wiedzieli,
				; ile znaków nale¿y wy¶wietliæ
	inc	si		; SI=81h. [ds:81h] to pocz±tek
				; linii poleceñ
	pisz
	db	&quot;Linia polecen=&quot;, 0
	pisz_dl			; wypisujemy CX znaków spod DS:SI,
				; czyli ca³± liniê poleceñ
	nwln

	mov	ax, cs
	pisz
	db	&quot;Segment kodu programu CS=&quot;, 0
	pisz16			; wy¶wietlamy AX=CS
	nwln
	mov	ax, ds
	pisz
	db	&quot;Segment danych DS=&quot;, 0
	pisz16			; wy¶wietlamy AX=DS
	nwln

	mov	ax, [ds:2ch]
	pisz
	db	&quot;Segment zmiennych srodowiskowych: DS:[2ch]=&quot;,0
	pisz16			; wy¶wietlamy AX=segment ¶rodowiska
	nwln

	; wy³±czyæ poni¿sze linie a¿ do "wypisz_srod" w przypadku FASMa z
	; nowym formatem biblioteki (32-bitowy COFF nie pozwala na
	; manipulacjê segmentami)
	mov	ds, ax		; DS = segment ¶rodowiska
	xor	si, si		; SI = pocz±tek segmentu
	pisz
	db	&quot;Zmienne srodowiskowe: &quot;, 0

	mov	ah, 0eh		; funckja wypisywania znaku
	dec	si		; tylko po to, aby najbli¿sze INC SI
				; zadzia³a³o prawid³owo i ustawi³o nas z
				; powrotem na 0
wypisz_srod:
	nwln			; przejd¼ do nowej linii
wypisz:
	inc	si		; SI teraz pokazuje na kolejny znak
	cmp	si, 400	; ¿eby nie by³o za d³ugo -
			; to tê liczbê MO¯NA ZMIENIÆ
	ja	koniec

	mov	al, [si]	; pobierz znak spod [DS:SI]
	test	al, al		; czy bajt zerowy?
	jz	sprawdz		; je¶li tak, to sprawdzimy,
				; czy nie dwa pod rz±d

	int	10h		; wypisz znak
	jmp	short	wypisz	; i w kó³ko od nowa

sprawdz:
	cmp	byte [si+1], 0
	jne	wypisz_srod

koniec:
	wyjscie</PRE>

<P>
<a name="a_kurs1202" id="a_kurs1202">Jak widaæ, nie by³o to a¿ takie</a>
 trudne jak siê mog³o zdawaæ na pocz±tku. W³a¶nie poznali¶cie
kolejn± rzecz, która jest ³atwa w u¿yciu, a mo¿liwo¶ci której s± du¿e. Teraz bêdziecie mogli
¶mia³o zacz±æ pisaæ programy, których jedynym kana³em komunikacyjnym z u¿ytkownikiem
bêdzie linia poleceñ, co znacznie upro¶ci ich obs³ugê.<BR>
<BR>
Tylko pamiêtajcie o dodaniu kodu wy¶wietlaj±cego sposób u¿ycia programu, gdy nie podano mu
¿adnych parametrów.
</P>

<br><br>
<div class="bezdruk">
<a accesskey="3" hreflang="pl" href="a_kurs11.htm">Poprzednia czê¶æ kursu</a> (Alt+3)<BR>
<a accesskey="4" hreflang="pl" href="a_kurs13.htm">Kolejna czê¶æ kursu</a> (Alt+4)<br>
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>


<BR><HR>
<h2 class="nag">Æwiczenia</h2>
<OL>
 <LI>Napisz program, który utworzy plik podany jako parametr. Je¶li podano drugi parametr
	(oddzielony od pierwszego spacj±), zapisz jego warto¶æ do tego pliku. Je¶li nie podano
	¿adnych parametrów, niech program wypisze stosown± wiadomo¶æ.<BR><BR></LI>
 <LI>Napisz program, który oblicza <acronym title="Najwiêkszy Wspólny Dzielnik">NWD</acronym>
 	 (patrz czê¶æ 8) dwóch liczb podanych na linii poleceñ.
	Je¶li nie podano wystarczaj±cej liczby parametrów, niech program wy¶wietli stosown±
	wiadomo¶æ.</LI>
</OL>

</BODY></HTML>

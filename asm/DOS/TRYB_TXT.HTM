<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: Dostêp do pamiêci ekranu </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Dostêp do pamiêci ekranu">
<META NAME="Keywords" CONTENT="Ekran, pamiêæ, B800, asm, assembler, asembler">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:49 GMT">
</HEAD><BODY>

<h1 class="nag">Bezpo¶redni dostêp do ekranu</h1>

<P>
Je¶li my¶licie, ¿e odpowiednie funkcje przerwañ 10h i 21h s± jedynym sposobem na to, aby napisaæ
co¶ na ekranie, to ten kurs poka¿e Wam, jak bardzo siê mylicie.
</P>
<P>
Na ekran w trybie tekstowym sk³ada siê 80x25 = 2000 znaków. Nie oznacza to jednak 2000 bajtów,
gdy¿ ka¿dy znak <q>zaopatrzony</q> jest w pewn± warto¶æ (1 bajt) mówi±c± o jego wygl±dzie.
 £±cznie jest wiêc 2000 s³ów (<span lang="en">word</span>, 16 bitów = 2 bajty),
 czyli 4000 bajtów. Ma³o, w porównaniu z wielko¶ci±
1 segmentu (64<abbr title="kilobajt">kB</abbr>).
 Te 4000 bajtów <q>¿yje</q> sobie w pewnym segmencie pamiêci - 0B800h
(kolorowe karty graficzne) lub 0B000h (mono).
</P>
<P>
Struktura tego bloku nie jest skomplikowana i wygl±da nastêpuj±co:</P>
<P>
b800:0000 - znak 1, w lewym górnym rogu<BR>
b800:0001 - atrybut znaku 1<BR>
b800:0002 - znak 2, znajduj±cy siê o 1 pozycjê w prawo od znaku 1<BR>
b800:0003 - atrybut znaku 2<BR>
i tak dalej</P>

<P>Czym za¶ jest atrybut?<BR>
Jest to bajt mówi±cy o kolorze danego znaku i kolorze t³a dla tego znaku. Bity w tym bajcie
oznaczaj±:<BR>
3-0 - kolor znaku (16 mo¿liwo¶ci)<BR>
6-4 - kolor t³a (8 mo¿liwo¶ci)<BR>
7 - miganie znaku (je¶li nie dzia³a, to oznacza, ¿e mamy 16 kolorów t³a zamiast 8)<BR>
</P>
<P>
Jeszcze tylko wystarczy omówiæ kolory odpowiadaj±ce poszczególnym bitom i mo¿emy co¶ pisaæ.
<BR>Oto te kolory:<br>
Czarny - 0, niebieski - 1, zielony - 2, b³êkitny - 3, czerwony - 4, ró¿owy - 5,
br±zowy - 6, jasnoszary (ten standardowy) - 7, ciemnoszary - 8, jasnoniebieski - 9,
jasnozielony - 10, jasnob³êkitny - 11, jasnoczerwony - 12, jasnoró¿owy - 13,
¿ó³ty - 14, bia³y - 15.</P>

<P>To powinno mówiæ samo za siebie:
 chcemy bia³y znak na czarnym tle? Odpowiedni bajt = 0fh.<BR>
A mo¿e ¿ó³ty znak na niebieskim tle? Bajt = 1eh.
</P>
<P>
Poni¿ej zamieszczam tak¿e programik, który szybko napisa³em w celu przetestowania teorii tu
przedstawionej (sk³adnia NASM):</P>

	<BR><a href="#tryb_txt02" tabindex="1" class="bezdruk">(przeskocz przyk³adowy program)</a>
<PRE title="przyk³adowy program">
	; nasm -O999 -o test.com -f bin test.asm

	org 100h

		mov ax, 0b800h
		mov bx, cs
		mov es, ax		; es = 0b800 = segment pamiêci ekranu
		mov ds, bx		; ds = cs
		xor di, di		; pozycja docelowa = di = 0
		mov si, tekst		; sk±d braæ bajty
		mov cx, dlugosc		; ile bajtów braæ

		rep movsb		; przesuñ CX bajtów z DS:SI do ES:DI

		xor ah, ah
		int 16h

		mov ax, 4c00h
		int 21h

	tekst	db &quot;T&quot;,1,&quot;e&quot;,2,&quot;k&quot;,3,&quot;s&quot;,4,&quot;t&quot;,5
		db &quot; &quot;,6,&quot;w&quot;,7,&quot;i&quot;,8,&quot;e&quot;,9,&quot;l&quot;,10,&quot;o&quot;,11,&quot;k&quot;,12,&quot;o&quot;,13
		db &quot;l&quot;,14,&quot;o&quot;,15,&quot;r&quot;,16,&quot;o&quot;,27h,&quot;w&quot;,38h,&quot;y&quot;,49h

	dlugosc equ $-tekst</PRE>

<P><a name="tryb_txt02" id="tryb_txt02">Zastosowa³em w nim sta³±</a>
 typu <CODE>equ</CODE>, aby nie zmieniaæ CX po ka¿dorazowej nawet
najdrobniejszej zmianie tekstu.</P>
<P>

Jak widaæ, wpisywanie ka¿dorazowo znaku z jego argumentem niekoniecznie sprawia przyjemno¶æ.
Na szczê¶cie z pomoc± przychodzi nam BIOS, ale nie funkcja 0e przerwania 10h, lecz funkcja 13h
tego¿ przerwania (opis wyciêty z
<A HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html"
 hreflang="en" lang="en"> Ralf Brown's Intterrupt List</A>):</P>

	<BR><a href="#tryb_txt03" class="bezdruk">(przeskocz opis int 10h, ah=13h)</a>
<PRE title="int 10h, ah=13h" lang="en">
	INT 10 - VIDEO - WRITE STRING (AT and later,EGA)
	        AH = 13h
	        AL = write mode
	           bit 0: update cursor after writing
	           bit 1: string contains alternating characters
	           	 and attributes
	           bits 2-7: reserved (0)
	        BH = page number
	        BL = attribute if string contains only characters
	        CX = number of characters in string
	        DH,DL = row,column at which to start writing
	        ES:BP -> string to write</PRE>

<P><a name="tryb_txt03" id="tryb_txt03">I krótki przyk³adzik zastosowania</a> (fragment kodu dla TASMa):</P>
	<BR><a href="#tryb_txt04" class="bezdruk">(przeskocz przyk³ad zastosowania int 10h, ah=13h)</a>

<PRE title="przyk³ad zastosowania int 10h, ah=13h">
	mov cx,cs
	mov ax,1301h			; funkcja pisania ci±gu znaków
	mov es,cx			; es = cs
	mov bx,j_czer			; atrybut (kolor)
	mov cx,info1_dl			; d³ugo¶æ ci±gu
	mov bp,offset info1		; adres ci±gu
	mov dx,(11 shl 8) or (40 - (info1_dl shr 1))	;wiersz+kolumna
	int 10h				; piszemy napis

	info1		db	&quot;Informacja&quot;
	info1_dl	equ	$ - info1</PRE>

<P><a name="tryb_txt04" id="tryb_txt04">Najwiêcej w±tpliwo¶ci mo¿e wzbudzaæ</a>
 linia kodu, która zapisuje warto¶æ do DX (wiersz i kolumnê
ekranu). Do DH idzie oczywi¶cie 11 (bo do DX idzie b=11 shl 8, czyli 0b00h). Napis
<CODE>(info1_dl shr 1)</CODE> dzieli d³ugo¶æ tekstu na 2, po czym tê warto¶æ odejmujemy od 40. Po co?<BR>
Jak wiemy, ekran ma 80 znaków szeroko¶ci. A tutaj od 40 odejmujemy po³owê d³ugo¶ci tekstu, który
chcemy wy¶wietliæ. Uzyskamy wiêc w taki sposób efekt wy¶rodkowania tekstu na ekranie. I to
wszystko.</P>

<P>
No dobrze, a co je¶li nie chcemy u¿ywaæ przerwañ a i tak chcemy mieæ tekst w wyznaczonej przez
nas pozycji?<BR>
Trzeba wyliczyæ <q>odleg³o¶æ</q> naszego miejsca od lewego górnego rogu ekranu. Jak nietrudno zgadn±æ,
wyra¿a siê ona wzorem (gdy znamy wspó³rzêdne przed kompilacj±):<BR>
wiersz*80 + kolumna<BR>
i to tê warto¶æ umieszczamy w DI i wykonujemy rep movsb.<BR>
Gdy za¶ wspó³rzêdne mog± siê zmieniaæ lub zale¿± od u¿ytkownika, to u¿yjemy nastêpuj±cej
sztuczki (kolumna i wiersz to 2 zmienne po 16 bitów):</P>

	<BR><a href="#tryb_txt05" class="bezdruk">(przeskocz obliczanie adresu w pamiêci ze wspó³rzêdnych)</a>

<PRE title="obliczanie przesuniêcia z danych wspó³rzêdnych">
	mov ax, [wiersz]
	mov bx, ax		; BX = AX
	shl ax, 6		; AX = AX*64
	shl bx, 4		; BX = BX*16 = AX*16
	add ax, bx		; AX = AX*64 + AX*16 = AX*80
	add ax, [kolumna]	; AX = 80*wiersz + kolumna

	mov di, ax
	shl di, 1	; DI mno¿ymy przez 2, bo s± 2 bajty na pozycjê</PRE>

<P><a name="tryb_txt05" id="tryb_txt05">i te¿ uzyskamy prawid³owy wynik</a>.
 Odradzam stosowanie instrukcji (I)MUL, gdy¿ jest do¶æ powolna.
</P>
<P>
Zajmiemy siê teraz czym¶ jeszcze ciekawszym: rysowanie ramek na ekranie. Oto programik, który
na ekranie narysuje 2 wype³nione prostok±ty (jeden bêdzie wype³niony kolorem czarnym). Korzysta
on z procedury, która napisa³em specjalnie w tym celu. Oto ten programik:</P>

	<BR><a href="#tryb_txt06" class="bezdruk">(przeskocz program rysuj±cy okienka z ramk±)</a>

<PRE title="program rysuj±cy okienka z ramk±">
; Rysowanie okienek z ramk±
;
; Autor: Bogdan D.
;
; nasm -O999 -o ramki.com -f bin ramki.asm


org 100h

; ramki podwójne:

	mov	ah, 7
	xor	bx, bx
	xor	cx, cx
	mov	dx, 9
	mov	bp, 9
	call	rysuj_okienko

	mov	ah, 42h
	mov	bx, 10
	mov	cx, 10
	mov	dx, 20
	mov	bp, 16
	call	rysuj_okienko

	xor	ah, ah
	int	16h

	mov	ax, 4c00h
	int	21h

rysuj_okienko:

; wej¶cie:
;
;  AH = atrybut znaku (kolor)
;  BX = kolumna lewego górnego rogu
;  CX = wiersz lewego górnego rogu
;  DX = kolumna prawego dolnego rogu
;  BP = wiersz prawego dolnego rogu
;
; wyj¶cie:
;  nic


r_p	equ	0bah		; prawa boczna
r_pg	equ	0bbh		; prawa górna (naro¿nik)
r_pd	equ	0bch		; prawa dolna

r_g	equ	0cdh		; górna
r_d	equ	r_g		; dolna

r_l	equ	r_p		; lewa boczna
r_lg	equ	0c9h		; lewa górna
r_ld	equ	0c8h		; lewa dolna

spacja	equ	20h


	push	di
	push	si
	push	es
	push	ax

	mov	di, cx
	mov	si, cx
	shl	di, 6
	shl	si, 4
	add	di, si		; DI = DI*80 = numer pierwszego wiersza * 80


	mov	si, 0b800h
	mov	es, si		; ES = segment ekranu

	mov	si, di
	add	di, bx		; DI = pozycja pocz±tku
	add	si, dx		; SI = pozycja koñca

	shl	di, 1		; 2 bajty/element
	shl	si, 1

	mov	al, r_lg
	mov	[es:di], ax	; rysujemy lewy górny naro¿nik

	add	di, 2

	mov	al, r_g		; bêdziemy rysowaæ górny brzeg

.rysuj_gore:

	cmp	di, si		; dopóki DI &lt; pozycja koñcowa
	jae	.koniec_gora

	mov	[es:di], ax
	add	di, 2
	jmp	short .rysuj_gore

.koniec_gora:
	mov	al, r_pg
	mov	[es:di], ax	; rysujemy prawy górny naro¿nik


.wnetrze:
	shr	di, 1

	add	di, 80		; kolejny wiersz
	sub	di, dx		; pocz±tek wiersza

	push	di

	mov	di, bp
	mov	si, bp
	shl	di, 6
	shl	si, 4
	add	si, di		; SI = SI*80 = numer ostatniego wiersza * 80

	pop	di

	cmp	di, si		; czy skoñczyli¶my?
	je	.koniec_wnetrze

	mov	si, di
	add	di, bx		; DI = pozycja pocz±tku
	add	si, dx		; SI = pozycja koñca

	shl	di, 1		; 2 bajty / element
	shl	si, 1

	mov	al, r_l
	mov	[es:di], ax	; rysujemy lewy brzeg
	add	di, 2

	mov	al, spacja	; wnêtrze okienka wype³niamy spacjami
.rysuj_srodek:

	cmp	di, si		; dopóki DI &lt; pozycja koñcowa
	jae	.koniec_srodek

	mov	[es:di], ax
	add	di, 2
	jmp	short .rysuj_srodek

.koniec_srodek:

	mov	al, r_p
	mov	[es:di], ax	; rysujemy prawy brzeg

	jmp	short .wnetrze

.koniec_wnetrze:


	mov	di, bp
	mov	si, bp
	shl	di, 6
	shl	si, 4
	add	di, si		; DI = DI*80


	mov	si, di
	add	di, bx		; DI = pozycja pocz±tku w ostatnim wierszu
	add	si, dx		; SI = pozycja koñca w ostatnim wierszu

	shl	di, 1		; 2 bajty / element
	shl	si, 1

	mov	al, r_ld
	mov	[es:di], ax	; rysujemy lewy dolny naro¿nik

	add	di, 2

	mov	al, r_d		; bêdziemy rysowaæ dolny brzeg

.rysuj_dol:

	cmp	di, si		; dopóki DI &lt; pozycja koñcowa
	jae	.koniec_dol

	mov	[es:di], ax
	add	di, 2
	jmp	short .rysuj_dol

.koniec_dol:
	mov	al, r_pd
	mov	[es:di], ax	; rysujemy prawy dolny naro¿nik


	pop	ax
	pop	es
	pop	si
	pop	di

	ret</PRE>

<P><a name="tryb_txt06" id="tryb_txt06">Program nie jest skomplikowany</a>,
 a komentarze powinny rozwiaæ wszystkie w±tpliwo¶ci. Nie bêdê
wiêc szczegó³owo omawia³, co ka¿da linijka robi, skupiê siê jednak na kilku sprawach:</P>
<UL>
 <LI>Oddzielanie instrukcji od jej argumentów tabulatorem<BR>
	<P>Poprawia to nieco czytelno¶æ kodu.</P></LI>

 <LI>Kropki przed etykietami<BR>
	<P>Sprawiaj±, ¿e te etykiety s± lokalne dla tej procedury. Nie bêd± siê myliæ z takimi
	samymi etykietami umieszczonymi po innej etykiecie globalnej.</P></LI>

 <LI>Stosowanie <CODE>equ</CODE><BR>
	<P>Wygodniejsze ni¿ wpisywanie ci±gle tych samych bajtów w kilkunastu miejscach. Szybko
	umo¿liwiaj± prze³±czenie siê na przyk³ad na ramki pojedynczej d³ugo¶ci.</P></LI>

 <LI><P>Nie u¿ywam MUL, gdy¿ jest za wolne (co prawda tutaj nie zrobi³oby to mo¿e ogromnej ró¿nicy,
	ale gdzie indziej mog³oby).</P></LI>

 <LI>Umieszczenie w programie sposobu kompilacji<BR>
	<P>Mo¿e oszczêdziæ innym du¿ego bólu g³owy, którego by siê nabawili, szukaj±c kompilatora
	dla tego kodu.</P></LI>

 <LI>Napisanie, co procedura przyjmuje i co zwraca<BR>
	<P>Bardzo wa¿ne! Dziêki temu u¿ytkownik wie, co ma wpisaæ do jakich rejestrów, co procedura
	zwraca i (ewentualnie) które rejestry modyfikuje (tego raczej nale¿y unikaæ).
	</P></LI>
</UL>
<P>
Jak widaæ, <q>rêczne</q> manipulowanie ekranem wcale nie musi byæ trudne, a jest wprost idealnym
rozwi±zaniem, je¶li zale¿y nam na szybko¶ci i nie chcemy u¿ywaæ powolnych przerwañ.</P>

<P>Mi³ego eksperymentowania!</P>

<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>

</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS, czê¶æ 11 - Pliki </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Prev"     hreflang="pl" lang="en" href="a_kurs10.htm">
<link rel="Next"     hreflang="pl" lang="en" href="a_kurs12.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Kurs jêzyka asembler">
<META NAME="Keywords" CONTENT="kurs, asm, asembler, assembler, pliki">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:48 GMT">
</HEAD><BODY>

<div class="c">Jak pisaæ programy w jêzyku asembler?<BR>
	<h1 class="nag">Czê¶æ 11 - Pamiêæ jest nietrwa³a, czyli jak pos³ugiwaæ siê plikami</h1></div>

<P>
Jak wiemy, wszystkich danych nie zmie¶cimy w pamiêci. A nawet je¶li zmie¶cimy, to pozostan±
tam tylko do najbli¿szego wy³±czenia pr±du.
 Dlatego trzeba je zapisywaæ do pliku, a
potem umieæ je z tego pliku odczytaæ. W tej czê¶ci zajmiemy siê w³a¶nie operacjami na plikach.
</P>
<P>
Do operowania na plikach pos³u¿ymy siê kilkoma funkcjami przerwania 21h:</P>
<UL>
 <LI>AH = <span class="b">3Ch</span> - utworzenie pliku (wymazanie, gdy ju¿ istnieje).<br>
 	<P>W rejestrze CX podajemy atrybuty
	pliku (ustawiony bit 0 oznacza plik tylko do odczytu, bit 1 - czy plik ma byæ ukryty,
	bit 2 - plik systemowy, 3 - etykieta woluminu, 4 - zawsze zero, 5 - plik archiwalny),
	a DS:DX wskazuje na nazwê pliku.<BR>
	<em class="wazne">UWAGA: Nazwa musi byæ zakoñczona bajtem zerowym</em><BR>
	Niewype³nienie powy¿szego warunku jest przyczyn± wielu b³êdów w programach.<BR>
	W rejestrze AX otrzymujemy <q>uchwyt do pliku</q> (<span lang="en">file handle</span>)
	 - specjaln± warto¶æ przydzielan± nam przy otwieraniu pliku.
	</P></LI>

 <LI>AH = <span class="b">3Dh</span> - otworzenie istniej±cego pliku.<br>
 	<P>W rejestrze AL podajemy tryb dostêpu,
	DS:DX wskazuje na nazwê pliku.<BR>
	Tryby dostêpu okre¶la siê nastêpuj±cymi bitami w AL (pomijam nieistotne informacje,
	ca³o¶æ mo¿ecie znale¼æ w <A
	HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html" hreflang="en"
	><acronym lang="en" title="Ralf Brown's Interrupt List">RBIL</acronym></A>):</P>
	<pre>
	Bit	Opis
	2-0	tryb dostêpu
		000 tylko do odczytu
		001 tylko do zapisu
		010 odczyt i zapis
	3	zarezerwowany, musi byæ 0
	6-4	tryb wspó³dzielenia (DOS 3.0+)
		000 tryb zgodno¶ci
		001 <span lang="en">DENYALL</span> - zabroñ innym odczytu i zapisu
		010 <span lang="en">DENYWRITE</span> - zabroñ innym zapisu
		011 <span lang="en">DENYREAD</span> - zabroñ innym odczytu
		100 <span lang="en">DENYNONE</span> - niczego nie zabraniaj
	7	dziedziczenie
		Je¶li ten bit jest ustawiony, plik jest prywatny dla bie¿±cego procesu
		i nie bêdzie dziedziczony przez procesy potomne	</pre>
	<P><em class="wazne">UWAGA: Nazwa musi byæ zakoñczona bajtem zerowym</em><BR>
	W rejestrze AX otrzymujemy <q>uchwyt do pliku</q> (<span lang="en">file handle</span>)
	 - specjaln± warto¶æ przydzielan± nam przy otwieraniu pliku.
	</P></LI>

 <LI>AH = <span class="b">3Eh</span> - zamkniêcie otwartego pliku.<br>
 	<P>W rejestrze BX podajemy uchwyt do pliku.
	</P></LI>

 <LI>AH = <span class="b">3Fh</span> - odczyt z pliku.<br>
 	<P>W rejestrze BX podajemy uchwyt do pliku, w CX - liczba bajtów do
	odczytania, DS:DX wskazuje na miejsce, dok±d bêdziemy zapisywaæ.
	</P></LI>

 <LI>AH = <span class="b">40h</span> - zapis do pliku.<br>
 	<P>W rejestrze BX podajemy uchwyt do pliku, w CX - liczba bajtów do
	zapisania, DS:DX wskazuje na miejsce, z którego bêdziemy czytaæ dane do zapisania.
	</P></LI>

 <LI>AH = <span class="b">42h</span> - przechodzenie na okre¶lon± pozycjê w pliku.<br>
 	<P>Rejestr AL mówi DOSowi, sk±d wyruszamy:
	0 - z pocz±tku pliku, 1 - z bie¿±cej pozycji, 2 - z koñca pliku. BX = uchwyt pliku,
	CX : DX - odleg³o¶æ, o któr± siê przesuwamy (mo¿e byæ ujemna).
	</P></LI>

 <LI>AH = <span class="b">41h</span> - usuwanie pliku.<br>
 	<P>DS:DX wskazuje na nazwê pliku.<BR>
	<em class="wazne">UWAGA: Nazwa musi byæ zakoñczona bajtem zerowym</em>
	</P></LI>
</UL>
<P>Wszystkie te funkcje ustawiaj± flagê <span lang="en">carry</span> (CF=1), gdy wyst±pi³ jaki¶ b³±d.<BR>
Po szczegó³y (w tym kody b³êdów) odsy³am do
<A HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html" hreflang="en"
	>Listy Przerwañ Ralfa <span lang="en">Brown</span>'a</A>.</P>

<P>
Przyk³adowe u¿ycie tych funkcji:</P>
	<BR><a href="#a_kurs1101" tabindex="1" class="bezdruk">(przeskocz przyk³ady)</a>
<br>
Utworzenie pliku i zapisanie czego¶ do niego:
<PRE title="przyk³ady">
	mov	ah, 3ch		; numer funkcji - utworzenie
	mov	dx, nazwa	; adres nazwy pliku
	xor	cx, cx		; atrybuty. Zero oznacza normalny plik.
	int	21h		; utworzenie pliku
	jc	blad		; sprawdzamy, czy nie ma b³êdu.

	mov	[uchwyt], ax
	mov	bx, ax		; zapisujemy uchwyt

	mov	ah, 40h		; numer funkcji - zapis
				; BX = uchwyt do pliku
	mov	cx, 1024	; liczba bajtów do zapisania
	mov	dx, bufor	; adres bufora, z którego bierzemy bajty
	int	21h		; zapis do pliku
	jc	blad		; sprawdzamy, czy nie ma b³êdu.

	mov	ah, 3eh		; numer funkcji - zamkniêcie pliku
				; BX = uchwyt do pliku
	int	21h		; zamykamy plik
	jc	blad		; sprawdzamy, czy nie ma b³êdu.</PRE>

<P>Otwarcie istniej±cego pliku, odczytanie i zapisanie czego¶ do niego:</P>
	<pre>
	mov	ah, 3dh		; numer funkcji - otwieranie pliku
	mov	al, 00010010b	; wy³±czny dostêp do odczytu i zapisu
	mov	dx, nazwa	; adres nazwy pliku
	int	21h		; utworzenie pliku
	jc	blad		; sprawdzamy, czy nie ma b³êdu.

	mov	[uchwyt], ax
	mov	bx, ax		; zapisujemy uchwyt

	mov	ah, 3fh		; numer funkcji - odczyt
				; BX = uchwyt do pliku
	mov	cx, 1024	; liczba bajtów do odczytania
	mov	dx, bufor	; adres bufora, do którego czytamy
	int	21h		; czytamy z pliku
	jc	blad		; sprawdzamy, czy nie ma b³êdu.

	; .... operacje na bajtach z pliku, na przyk³ad
	xor	byte [bufor], 0ffh

	mov	ah, 40h		; numer funkcji - zapis
				; BX = uchwyt do pliku
	mov	cx, 1024	; liczba bajtów do zapisania
	mov	dx, bufor	; adres bufora, z którego bierzemy bajty
	int	21h		; zapis do pliku
	jc	blad		; sprawdzamy, czy nie ma b³êdu.

	; Zauwa¿cie, ¿e zapisane bajty wyl±dowa³y po odczytanych, gdy¿ nie
	; zmienili¶my pozycji w pliku, a ostatnia operacja (odczyt) zostawi³a
	; j± tu¿ po odczytanych bajtach

	mov	ah, 3eh		; numer funkcji - zamkniêcie pliku
				; BX = uchwyt do pliku
	int	21h		; zamykamy plik
	jc	blad		; sprawdzamy, czy nie ma b³êdu.</PRE>


<BR>
<P><a name="a_kurs1101" id="a_kurs1101">A teraz <q>prawdziwy</q> przyk³ad</a>.
 Bêdzie to nieco uszczuplona (pomin±³em wczytywanie nazwy pliku)
wersja mojego programu <q>na_male.asm</q>. Program ten zamienia wszystkie wielkie litery w podanym
pliku na ich ma³e odpowiedniki. Reszta znaków pozostaje bez zmian. Jedna rzecz jest warta
uwagi - nigdzie nie zmieniam rejestru BX, wiêc ci±gle w nim jest uchwyt do pliku i nie muszê
tego uchwytu zapisywaæ do pamiêci.<BR>
A teraz kod:</P>
	<BR><a href="#a_kurs1102" class="bezdruk">(przeskocz na_male.asm)</a>
<PRE title="na_male.asm">
; Program zamienia wszystkie litery w podanym pliku z wielkich na male.
;
; Autor: Bogdan D.
; kontakt: bogdandr (at) op (dot) pl
;
; nasm -O999 -o na_male.com -f bin na_male.asm
; fasm na_male.asm na_male.com

org 100h

start:
	mov	dx, info
	mov	ah, 9
	int	21h

	mov	ax, 3d02h	; otwórz do odczytu i zapisu,
				; zabroñ wszystkim dostêpu
	mov	dx, plik	; adres nazwy pliku
	int	21h

	jnc	otw_ok
	call	plik_blad	; uruchamiamy tê procedurê, gdy wyst±pi³ b³±d
	jmp	zamk_ok		; je¶li nie uda³o siê nam nawet otworzyæ
				; pliku, to od razu wychodzimy z programu.


otw_ok:
	mov	bx, ax		; zapisujemy uchwyt do pliku
	mov	bp, 400h	; BP = rozmiar bufora.

czytaj:
	mov	ah, 3fh		; funkcja czytania
				; BX = uchwyt
	mov	dx, bufor	; adres bufora, dok±d czytamy
	mov	cx, bp		; kilobajt - rozmiar bufora
	int	21h		; odczyt

	jnc	czyt_ok
	call	plik_blad	; uruchamiamy tê procedurê, gdy wyst±pi³ b³±d

czyt_ok:
	xor	di, di		; DI bêdzie wska¼nikiem do bufora.
				; Na pocz±tku go zerujemy.
	cmp	ax, cx		; Czy liczba bajtów odczytana (AX) =
				; = liczba ¿±dana (CX) ?
	jne	przy_eof	; je¶li nie, to plik siê skoñczy³

zamiana:
	mov	dl, [bufor+di]	; wczytujemy znak z bufora do DL

	cmp	dl, &quot;A&quot;
	jb	znak_ok
	cmp	dl, &quot;Z&quot;
	ja	znak_ok

	or	dl, 20h		; je¶li okaza³ siê wielk± liter±, zamieniamy
				; go na ma³±
	mov	[bufor+di], dl	; i zapisujemy w miejsce,
				; gdzie poprzednio by³

znak_ok:
	inc	di		; przechodzimy do innych znaków
	loop	zamiana		; a¿ przejdziemy przez ca³y bufor
				; (CX=BP=400h)

	mov	dx, ax		; DX = liczba przeczytanych bajtów
	mov	ax, 4201h	; id¼ do ... od pozycji bie¿±cej.
				; aby zapisaæ zmienione litery,
				; musimy przej¶æ
				; siê w pliku o 1 kilobajt wstecz.
				; Do CX:DX wpisujemy odleg³o¶æ
	neg	dx		; DX = -DX
;	dec	cx		; CX po wyj¶ciu z pêtli jest zerem,
				; wiêc wykonanie DEC zrobi z niego -1.
	mov	cx, 0ffffh	; CX = -1
				; CX:DX = -DX = -liczba przeczytanych bajtów

				; BX = uchwyt
	int	21h		; wykonujemy przeskok w pliku

	jnc	idz_ok
	call	plik_blad

idz_ok:				; po udanym przeskoku

	mov	dx, bufor	; DX = adres bufora, sk±d bêdziemy braæ dane
				; do zapisania
				; BX = uchwyt
	mov	ah, 40h		; funkcja zapisz
	mov	cx, bp		; CX = BP = 400h = d³ugo¶æ bufora.
	int	21h		; zapisujemy

	jmp	short czytaj	; i idziemy czytaæ now± partiê danych.

przy_eof:			; gdy jeste¶my ju¿ przy koñcu pliku.

;	xor	di, di		; DI ju¿ = 0 (wcze¶niej to zrobili¶my)

	mov	bp, ax		; BP = liczba przeczytanych znaków
	mov	cx, ax		; CX = liczba przeczytanych znaków

zamiana2:
	mov	dl, [bufor+di]	; pobieramy znak z bufora do DL

	cmp	dl, &quot;A&quot;
	jb	znak_ok2
	cmp	dl, &quot;Z&quot;
	ja	znak_ok2

	or	dl, 20h		; je¶li okaza³ siê wielk± liter±,
				; zamieniamy go na ma³±
	mov	[bufor+di], dl	; i zapisujemy w miejsce,
				; gdzie poprzednio by³

znak_ok2:
	inc	di		; przechodzimy do innych znaków
	loop	zamiana2	; a¿ przejdziemy przez ca³y bufor
				; (CX = BP = liczba bajtów)

	mov	dx, bp
;	dec	cx		; CX po wyj¶ciu z pêtli jest zerem, wiêc
				; wykonanie DEC zrobi z niego -1.
	mov	cx, 0ffffh	; CX = -1
				; CX:DX = -DX
	mov	ax, 4201h	; id¼ do ... od pozycji bie¿±cej.
	neg	dx		; DX = -DX.
				; CX:DX = -DX = -liczba przeczytanych bajtów

				; BX = uchwyt
	int	21h		; wykonujemy przeskok w pliku

	jnc	idz_ok2
	call	plik_blad

idz_ok2:			; po udanym przeskoku

	mov	dx, bufor	; zapiszemy do pliku resztê danych.
				; DX = adres bufora.
				; BX = uchwyt
	mov	cx, bp		; CX = liczba bajtów uprzednio odczytanych
	mov	ah, 40h		; funkcja zapisu do pliku
	int	21h		; zapisujemy

	jnc	zamk		; gdy nie ma b³êdu, to zamkniemy plik
	call	plik_blad

zamk:
	mov	ah, 3eh
				; BX = uchwyt
	int	21h		; zamykamy nasz plik
	jnc	zamk_ok
	call	plik_blad

zamk_ok:
	mov	ax, 4c00h
	int	21h		; wyj¶cie...


plik_blad:			; procedura wy¶wietla informacjê o tym, ¿e
				; wyst±pi³ b³±d i wypisuje numer tego b³êdu
	push	ax
	push	bx

	mov	dx, blad_plik
	mov	bx, ax
	mov	ah, 9
	int	21h

	mov	ax, bx
	call	pl

	pop	bx
	pop	ax

	ret

pl:                   	; procedura wypisuje liczbê (4 znaki szesnastkowe)

	mov	bx, ax
	shr	ax, 12
	call	pc2

	mov	al, bh
	and	al, 0fh
	call	pc2

	mov	al, bl
	shr	al, 4
	and	al, 0fh
	call	pc2

	mov	al, bl
	and	al, 0fh
	call	pc2

	ret

pc2:
;we: AL - cyfra hex
;wy: wy¶wietla cyfrê, niszczone ax

	cmp	al, 9
	mov	ah, 0eh
	ja	hex
	or	al, &quot;0&quot;
	jmp	short pz
hex:
	add	al, &quot;A&quot;-10
pz:
	int	10h

	ret

bufor: 		times 400h db 0		; bufor wielko¶ci jednego kilobajta
;plik: 		times 80 db 0
plik		db &quot;aaa.txt&quot;,0		; nazwa pliku

info db &quot;Program zamienia wielkie litery w pliku na male.&quot;,10,13,&quot;$&quot;
input1		db &quot;Podaj nazwe pliku do przetworzenia: $&quot;
zla_nazwa 	db 10,13,&quot;Zla nazwa pliku.$&quot;
blad_plik 	db 10,13,&quot;Blad operacji na pliku. Kod: $&quot;</PRE>

<P><a name="a_kurs1102" id="a_kurs1102">Ten program chyba nie by³ za trudny, prawda?</a>
 Ca³a tre¶æ skupia siê na odczytaniu paczki bajtów,
ewentualnej ich podmianie i zapisaniu ich w to samo miejsce, gdzie by³y wcze¶niej.</P>

<P>
Pliki s± podstawowym sposobem przechowywania danych. My¶lê wiêc, ¿e siê ze mn± zgodzicie, i¿
opanowanie ich obs³ugi jest wa¿ne i nie jest to a¿ tak trudne, jakby siê mog³o wydawaæ.</P>

<br>
<div class="bezdruk">
<a accesskey="3" hreflang="pl" href="a_kurs10.htm">Poprzednia czê¶æ kursu</a> (Alt+3)<BR>
<a accesskey="4" hreflang="pl" href="a_kurs12.htm">Kolejna czê¶æ kursu</a> (Alt+4)<br>
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>


<BR><BR><HR>
<h2 class="nag">Æwiczenia</h2>
<OL>
 <LI>Napisz program, który wykona po kolei nastêpuj±ce czynno¶ci:
  <OL class="alfa">
   <LI>Utworzy nowy plik</LI>
   <LI>Zapisze do niego 256 bajtów o warto¶ciach od 00 do FF (nie musicie zapisywaæ po 1 bajcie)</LI>
   <LI>Zamknie ten plik</LI>
   <LI>Otworzy ponownie ten sam plik</LI>
   <LI>Zapisze odczytane bajty w nowej tablicy 256 s³ów w taki sposób:
	<PRE>
		00 00 00 01 00 02 00 03 00 04 .... 00 FD 00 FE 00 FF	</PRE>
	czyli ka¿dy oddzielony bajtem zerowym (nale¿y przeczytaæ wszystkie bajty, po czym rêcznie
	je przenie¶æ gdzie indziej i <q>wzbogaciæ</q>)</LI>
   <LI>Zamknie otwarty plik</LI>
   <LI>Usunie ten plik</LI>
  </OL>
 </LI>
</OL>

</BODY></HTML>

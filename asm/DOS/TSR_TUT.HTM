<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: Programy rezydentne (TSR-y) </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Pisanie programów rezydentnych (TSR-ów) w asemblerze">
<META NAME="Keywords" CONTENT="TSR, assembler, asm, asembler, rezydent">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="Kwrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:49 GMT">
</HEAD><BODY>

<h1 class="nag">Pisanie programów rezydentnych (TSR-ów)</h1>

<P>
W tym mini-kursie zajmiemy siê sposobem pisania TSR-ów, czyli programów, które po uruchomieniu i
zakoñczeniu pozostaj± w pamiêci (TSR = <span lang="en">Terminate and Stay Residend</span>).
</P>
<P>
Pierwsze pytanie, które siê nasuwa, brzmi: Po co to komu?<BR>
G³ówn± przyczyn± jest to, ¿e chcemy co¶ robiæ <q>w tle</q>, czyli pozwalaj±c u¿ytkownikowi
uruchamianie innych programów.<BR>
A co chcieliby¶my robiæ <q>w tle</q>?<BR>
No có¿, <acronym lang="en" title="Disk Operating System">DOS</acronym>-owe
 sterowniki (które te¿ s± TSR-ami) zajmuj± siê wieloma sprawami, na przyk³ad
zarz±dzaj± pamiêci± (jak EMM386.EXE), kontroluj± <span lang="en">CD-ROM</span>y czy karty d¼wiêkowe.
</P>
<P>
Skoro ju¿ wiemy po co, to przysz³a pora, aby dowiedzieæ siê, jak pisaæ takie programy.<BR>
Otó¿, jak siê okazuje, nie jest to wcale takie trudne. Spójrzmy, co oferuje nam Lista Przerwañ
Ralfa <span lang="en">Brown</span>'a
(<A HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html"
 hreflang="en" tabindex="1"><acronym title="Ralf Brown's Interrupt List" lang="en">RBIL</acronym></A>):</P>

	<BR><a href="#tsr_tut01" class="bezdruk">(przeskocz opis int 21h, ah=31h)</a>
<PRE title="int 21h, ah=31h" lang="en">
	INT 21 - DOS 2+ - TERMINATE AND STAY RESIDENT
	        AH = 31h
	        AL = return code
	        DX = number of paragraphs to keep resident
	Return: never
	Notes:  the value in DX only affects the memory block containing the
		 PSP; additional memory allocated via AH=48h is not affected
	        the minimum number of paragraphs which will remain resident
	         is 11h for DOS 2.x and 06h for DOS 3.0+
	        most TSRs can save some memory by releasing their environment
	         block before terminating (see #01378 at AH=26h,AH=49h)
	        any open files remain open, so one should close any files
	         which will not be used before going resident; to access a
	         file which is left open from the TSR, one must switch PSP
	         segments first (see AH=50h)</PRE>

<P>Jeden paragraf to 16 bajtów.</P>
<P><a name="tsr_tut01" id="tsr_tut01">Jak widaæ, trzeba bêdzie zadbaæ o kilka spraw</a>:</P>
<OL>
 <LI><P>zamkniêcie ewentualnych otwartych plików.</P></LI>

 <LI>zwolnienie nieu¿ywanej pamiêci<br>
	<P>W zwolnieniu pamiêci pomo¿e nam funkcja:</P>
	<BR><a href="#tsr_tut02" class="bezdruk">(przeskocz opis int 21h, ah=49h)</a>
	<PRE title="int 21h, ah=49h" lang="en">
		INT 21 - DOS 2+ - FREE MEMORY
		        AH = 49h
	        	ES = segment of block to free
		Return: CF clear if successful
		        CF set on error
	            	AX = error code (07h,09h)</PRE>

	<P><a name="tsr_tut02" id="tsr_tut02">Je¶li uruchamiamy program typu .com</a>,
	 to DOS domy¶lnie przydziela mu ca³± dostêpn± pamiêæ.
	Bêdziemy zwalniaæ segment ¶rodowiska, adres którego znajdziemy pod ds:[2ch]. DOS sam
	zwolni pamiêæ przydzielon± naszemu programowi po jego zakoñczeniu.
	Jak wiemy, programy typu .com wczytywane s± pod adres 100h w danym segmencie, a wcze¶niej
	jest PSP (<span lang="en">Program Segment Prefix</span>),
	 który zawiera miêdzy innymi liniê poleceñ (od offsetu 80h).<br>
	W programach typu .exe (wczytywanych zwykle pod adresem 0), DS pokazuje po prostu wcze¶niej
	ni¿ CS (zazwyczaj DS = CS - 10h, czyli dodatkowe 10h*10h = 100h bajtów jest przed kodem).
	</P></LI>

 <LI><P>je¶li nasz TSR przejmuje jakie¶ przerwanie (zazwyczaj tak w³a¶nie bêdzie, bo po co
	pisaæ TSR, którego nie bêdzie mo¿na w ¿aden sposób uruchomiæ?), nale¿y w swojej
	procedurze obs³ugi przerwania (<span lang="en">Interrupt Service Routine</span>
	 - ISR) uruchomiæ star± ISR.
	Oprócz tego, po odinstalowaniu naszego TSR trzeba przywróciæ adres starej ISR. Nie muszê
	chyba mówiæ, co by siê sta³o, gdyby procesor chcia³ wykonaæ instrukcje pod adresem, pod
	którym nie wiadomo co siê znajduje.
	</P></LI>

 <LI><P>nale¿y sprawdziæ liniê poleceñ, z jak± uruchomiono nasz program (powiedzmy, ¿e je¶li nic
	tam nie ma, to u¿ytkownik chce zainstalowaæ nasz program w pamiêci, za¶ je¶li jest tam
	literka <q>u</q> lub <q>U</q>, to u¿ytkownik chce odinstalowaæ nasz program).
	</P></LI>
</OL>
<P>

Niestety, nie mam pod rêk± lepszych w³asnych przyk³adów ni¿ ten oto programik (te¿ mój, oczywi¶cie).
 Teoretycznie,
w czasie dostêpu do dysku twardego powinien w³±czyæ diodê Scroll Lock na klawiaturze. Uruchamiaæ
nale¿y go oczywi¶cie pod czystym DOSem. Mo¿e nie zawsze dzia³aæ, ale s± w nim elementy, które
chcia³bym omówiæ. Sk³adnia dla kompilatora NASM.</P>

	<BR><a href="#tsr_tut03" class="bezdruk">(przeskocz przyk³adowy program)</a>

<PRE title="program zapalaj±cy diodê ScrLck w czasie dostêpu do dysku">
; Pomys³ polega na tym, aby w czasie dostêpu do dysku twardego zapalaæ diodê
; Scroll Lock na klawiaturze.
;
; Autor: Bogdan D.
;
; nasm -O999 -o scrlck.com -f bin scrlck.asm
;
; z u¿yciem int 13h

; TASM:
; .model tiny
; .code

org 100h

start:
	jmp	kod


; to jest kod naszej procedury int 13h.
; Zostanie on w pamiêci.

znacznik	db 	&quot;ECA135&quot;
flagi		db	0

moje13h:
	pushf
	or	dl,dl	; je¶li nie dysk twardy (bit7 = 0) to nie ma nas tu
	js	dysk_ok

to_nie_my:
	popf
	db 0eah				; d³ugi skok do stare13h
	stare13h dd 4ch

dysk_ok:		; sprawdzamy, któr± komendê chce wykonaæ u¿ytkownik

	test	al,al			; reset
	je	to_my

	cmp	ah,2			; czytaj
	je	to_my

	cmp	ah,3			; pisz
	je	to_my

;	cmp	ah,5			; formatuj
;	je	to_my

;	cmp	ah,6			; formatuj
;	je	to_my

;	cmp	ah,7			; formatuj
;	je	to_my

	cmp	ah,0ah			; czytaj
	je	to_my

	cmp	ah,0bh			; pisz
	je	to_my

	cmp	ah,0ch			; szukaj
	je	to_my

	cmp	ah,0dh			; reset
	je	to_my

	cmp	ah,0eh			; czytaj bufor sektora
	je	to_my

	cmp	ah,0fh			; pisz bufor
	je	to_my

	cmp	ah,21h			; PS/1+ czytaj sektory
	je	to_my

	cmp	ah,22h			; PS/1+ zapisuj sektory
	jne	to_nie_my

to_my:
	push	ax

		;bit 2 = CapsLk, bit 1 = NumLk, bit 0 = ScrlLk,
		; reszta bitów musi byæ równa 0


	push	es
	xor	ax, ax
	mov	es, ax
; TASM:  mov	al, byte ptr es:[0417h]
	mov	al, [es:0417h]		; 0040:0017 - BIOS Data Area,
					; bajt stanu klawiatury
; TASM:  mov	cs:[flagi], al
	mov	[cs:flagi], al		; zachowujemy w bajcie  flagi
	pop	es

	mov	al, 0edh
	out	60h, al
	mov	al, 1			; zapalamy ScrLck
	out	60h, al

	pop	ax

; TASM:  call dword ptr cs:[stare13h]
	call	dword [cs:stare13h]	; pozwól, ¿eby stara procedura
					; int 13h te¿ zrobi³a swoje
					; flagi ju¿ s± na stosie

	pushf
	push	ax

					; sprawdzamy, które diody by³y
					; wcze¶niej zapalone
					; i zapalamy je ponownie

	xor	al, al
; TASM:  test	byte ptr cs:[flagi], 01000000b
	test	byte [cs:flagi], 01000000b
	jz	nie_caps
	or	al, 4

nie_caps:
; TASM:  test	byte ptr cs:[flagi], 00100000b
	test	byte [cs:flagi], 00100000b
	jz	nie_num
	or	al, 2

nie_num:
; TASM:  test	byte ptr cs:[flagi], 00010000b
	test	byte [cs:flagi], 00010000b
	jz	koniec
	or	al, 1

koniec:

; TASM:  mov	cs:[flagi], al
	mov	[cs:flagi], al
	mov	al, 0edh
	out	60h, al
; TASM:  mov	al, cs:[flagi]
	mov	al, [cs:flagi]
	out	60h, al			; zapalamy diody

	pop	ax
	popf

	iret				; Interrupt RETurn - wychodzimy


; pocz±tek w³a¶ciwego kodu

kod:
	mov	ax, cs
	mov	ds, ax		; DS = CS, na wszelki wypadek

	xor	bx, bx

	mov	si, 80h		; ds:[80h] - liczba znaków w linii poleceñ
	mov	al, [si]

	mov	es, bx		; ES = 0

	or	al, al		; liczba znaków=0? To idziemy siê zainstalowaæ
	jz	instaluj

petla:
	inc	si		; SI = 81h, 82h, ...

	mov	al, [si]	; sprawdzamy kolejny znak w linii poleceñ

	cmp	al, 0dh
	jz	instaluj	; Enter = koniec linii, wiêc instaluj

				; u lub  U oznacza, ¿e trzeba odinstalowaæ
	cmp	al, &quot;u&quot;
	je	dezinst

	cmp	al, &quot;U&quot;
	jne	petla

; odinstalowanie

dezinst:
; TASM:  mov	es, word ptr es:[13h*4 + 2]
	mov	es, [es:13h*4 + 2]	; ES = segment procedury obs³ugi
					; int 13h (mo¿e naszej)
; TASM:  mov	di, offset znacznik
	mov	di, znacznik
	mov	cx, 6
	mov	si, di
	repe	cmpsb			; sprawdzamy, czy nasz znacznik jest
					; na swoim miejscu
	jne	niema			; je¶li nie ma, to nie mo¿emy siê
					; odinstalowaæ

	mov	es, bx			; ES = 0
; TASM:  mov	es, word ptr es:[13h*4]
	mov	bx, [es:13h*4]
; TASM:  cmp	bx, offset moje13h
	cmp	bx, moje13h		; sprawdzamy, czy offsety aktualnego
					; int13h i naszego siê zgadzaj±

	jnz	niema			; je¶li nie, to nie nasza procedura
					; obs³uguje int13h i nie mo¿emy siê
					; odinstalowaæ


; TASM:  mov	es, word ptr es:[13h*4 + 2]
  	mov	es, [es:13h*4 + 2] 	; segment naszego TSRa
  	mov	ah, 49h

	cli				; wy³±czamy przerwania, bo co¶ przez
					; przypadek mog³oby uruchomiæ int 13h,
					; którego adres w³a¶nie zmieniamy

  	int	21h			; zwalniamy segment naszego rezydenta

	cli
					; kopiujemy adres starej procedury
					; int13h z powrotem do
					; Tablicy Wektorów Przerwañ
					; (Interrupt Vector Table - IVT)

; TASM:  mov	ax, word ptr [stare13h]
	mov	ax, [stare13h]		; AX=offset starej procedury int 13h
; TASM:  mov	bx, word ptr [stare13h+2]
	mov	bx, [stare13h+2]	; BX=segment starej procedury int 13h

; TASM:  mov	word ptr es:[13h*4], ax
	mov	[es:13h*4], ax
; TASM:  mov	word ptr es:[13h*4+2], bx
	mov	[es:13h*4+2], bx
	sti

; TASM:  mov	dx, offset juz_niema
	mov	dx, juz_niema		; informujemy u¿ytkownika, ¿e
					; odinstalowali¶my program
	mov	ah, 9
	int	21h

	mov	ax, 4c00h
	int	21h			; wyj¶cie bez b³êdu

niema:					; je¶li adresy procedur int13h siê
					; nie zgadzaj± lub nie ma naszego
					; znacznika, to poinformuj, ¿e nie
					; mo¿na odinstalowaæ

; TASM:  mov	dx, offset nie_ma
	mov	dx, nie_ma
	mov	ah, 9
	int	21h

	mov	ax, 4c01h
	int	21h			; wyj¶cie z kodem b³êdu = 1

; zainstalowanie

instaluj:
; TASM:  mov	es, word ptr es:[13h*4 + 2]
	mov	es, [es:13h*4 + 2]	; ES = segment procedury obs³ugi
					; int 13h (mo¿e naszej)
; TASM:  mov	di, offset znacznik
	mov	di, znacznik
	mov	cx, 6
	mov	si, di
	repe	cmpsb			; sprawdzamy, czy nasz znacznik
					; ju¿ jest w pamiêci
	je	juzjest			; je¶li tak, to drugi raz nie
					; bêdziemy siê instalowaæ

; TASM:  mov	es, word ptr cs:[2ch]
  	mov	es, [cs:2ch]  		; segment ¶rodowiska
  	mov	ah, 49h
  	int	21h			; zwalniamy


	mov	es, bx			; ES = 0
; TASM:  mov	ax, word ptr es:[13h*4]
	mov	ax, [es:13h*4]		; AX=offset starej procedury int 13h
; TASM:  mov	bx, word ptr es:[13h*4+2]
	mov	bx, [es:13h*4 + 2]	; BX=segment starej procedury int 13h

					; zachowujemy adres i segment:
; TASM:  mov	word ptr [stare13h], ax
	mov	[stare13h], ax
; TASM:  mov	word ptr [stare13h+2], bx
	mov	[stare13h+2], bx

					; zapisujemy nowy adres i
					; segment do IVT
	cli
; TASM:  mov	word ptr es:[13h*4], offset moje13h
	mov	word [es:13h*4], moje13h
; TASM:  mov	word ptr es:[13h*4 + 2], cs
	mov	[es:13h*4 + 2], cs
	sti

; TASM:	mov	dx, offset zainst
	mov	dx, zainst		; informujemy, ¿e zainstalowano
	mov	ah, 9
	int	21h

; TASM:	 mov	dx, offset kod
	mov	dx, kod
	mov	ax, 3100h
	shr	dx, 4			; DX=kod/16=liczba paragrafów do
					; zachowania w pamiêci
	inc	dx
	int	21h			; int 21h, AX = 3100h - TSR

juzjest:				; je¶li nasz program ju¿ jest w
					; pamiêci, to drugi raz siê nie
					; zainstalujemy
; TASM:	 mov	dx, offset juz_jest
	mov	dx, juz_jest
	mov	ah, 9
	int	21h

	mov	ax, 4c02h
	int	21h			; wyj¶cie z kodem b³êdu = 2


nie_ma		db &quot;Programu nie ma w pamieci.$&quot;
juz_niema	db &quot;Program odinstalowano.$&quot;
juz_jest	db &quot;Program juz zainstalowany.$&quot;
zainst		db &quot;Program zainstalowano.$&quot;

; TASM: end start</PRE>


<P><a name="tsr_tut03" id="tsr_tut03">Teraz omówiê kilka spraw</a>, o które mogliby¶cie zapytaæ:</P>
<UL>
 <LI>Zaraz po starcie jest skok do kodu. Dlaczego?<BR>
	<P>Funkcja 31h przerwania 21h musi dostaæ informacjê, ile paragrafów (od miejsca, gdzie
	zaczyna siê program) ma zachowaæ w pamiêci. Dlatego wiêc najpierw w programie zapisujemy
	kod rezydentny a potem resztê (instalacja / dezinstalacja), która nie bêdzie potem
	potrzebna w pamiêci.
	</P></LI>

 <LI>Po co ten znacznik?<BR>
	<P>Aby upewniæ siê przy próbie odinstalowania, ¿e to rzeczywi¶cie nasz± procedurê chcemy
	odinstalowaæ. Niedobrze by³oby, gdyby jaki¶ inny program potem przej±³ to przerwanie,
	a my by¶my go wyrzucili z pamiêci...<br>
	Tre¶æ znacznika mo¿e oczywi¶cie byæ dowolna.
	</P></LI>

 <LI>Czemu uruchomienie starej procedury jest w ¶rodku naszej (a nie na pocz±tku czy na koñcu)
     i czemu jest postaci <CODE> call dword ... </CODE> ?<BR>
	<P>Chodzi o to, aby najpierw zapaliæ <span lang="en">Scroll Lock</span>,
	 potem wykonaæ operacjê na dysku (do czego pos³u¿y nam prawdziwa procedura int13h)
	i na koñcu przywróciæ stan diód na klawiaturze. U¿ycie <code><span lang="en">CALL</span></code>
	a nie <code>JMP</code> spowoduje, ¿e odzyskamy kontrolê po tym, jak
	uruchomimy stare przerwanie. Za¶ adres starego przerwania to segment i offset, czyli
	razem 4 bajty (st±d: DWORD).
	</P></LI>

 <LI>Czemu wszêdzie jest <code>CS:</code> ?<BR>
	<P>Gdy jeste¶my w naszej procedurze, nie wiemy, ile wynosi DS. Wiemy, ¿e CS pokazuje na
	nasz± procedurê. S± wiêc 2 wyj¶cia:</P>
	<UL>
	 <LI>Zachowaæ DS na stosie, po czym zmieniæ go na nasz segment</LI>
	 <LI>Zamiast nieznanego DS, u¿ywaæ znanego CS</LI>
	</UL>
	<P>Wybra³em to drugie.
	</P></LI>

 <LI>Gdzie siê dowiedzieæ, jak zapalaæ diody na klawiaturze?<BR>
	<P>Instrukcje znajduj± siê w moim innym kursie. Polecam.
	</P></LI>

 <LI>Co robi instrukcja <code>IRET</code>?<BR>
	<P><span lang="en">Interrupt Return</span> robi tyle, co zwyk³y <code>RET</code>, ale jeszcze
	zdejmuje flagi ze stosu. Polecam opis instrukcji <code>INT</code> z drugiej czê¶ci mojego kursu.
	</P></LI>

 <LI>Co znajduje siê pod <code>ds:[80h]</code> ?<BR>
	<P>Liczba bajtów linii poleceñ programu.
	</P></LI>

 <LI>Gdzie znajduje siê linia poleceñ programu?<BR>
	<P>Od ds:[81h] maksymalnie do ds:[0ffh] (od ds:[100h] zwykle zaczyna siê kod programu).
	Napotkanie <span lang="en">Carriage Return</span> (13 = 0Dh)
	po drodze oznacza koniec linii poleceñ.
	</P></LI>

 <LI>Czemu w kodzie jest <code>[es:13h*4]</code> zamiast <code>[es:4ch]</code> ?<BR>
	<P>Czytelniejsze, bo oznacza, ¿e chcemy adres przerwania 13h.
	</P></LI>

 <LI>Czemu <q>int 21h</q> jest otoczone przez <code>CLI</code>?<BR>
	<P>Nie chcia³em ryzykowaæ, ¿e w chwili zmiany adresu lub zwalniania pamiêci rezydenta
	trafi siê jakie¶ przerwanie, które mog³oby chcieæ uruchomiæ int13h (którego ju¿ nie ma
	po tym int21h lub którego adres jest niespójny - zmienili¶my ju¿ segment, ale jeszcze
	nie offset itp.).
	</P></LI>

 <LI>Czemu program sprawdza znacznik itp. przy dezinstalacji ?<BR>
	<P>G³upio by³oby odinstalowaæ nie swoj± procedurê...<BR>
	Tym bardziej, ¿e najbli¿sze int13h spowodowa³oby nieprzewidywalne skutki.
	</P></LI>

 <LI>Czemu program sprawdza znacznik przy instalacji ?<BR>
	<P>Nie chcê, aby program instalowa³ siê wielokrotnie, gdy¿ potem odzyskanie adresu starej
	procedury zajê³oby tyle samo dezinstalacji, co instalacji.
	</P></LI>

 <LI>Co znajduje siê w <code>DS:[2ch]</code> ?<BR>
	<P>Numer segmentu pamiêci, w którym trzymane s± zmienne ¶rodowiskowe (jak <span lang="en">PATH</span>,
	<span lang="en">BLASTER</span>,
	 i wszystkie inne ustawiane komend± SET, na przyk³ad w pliku <span lang="en">autoexec</span>.bat).
	 Mo¿emy go zwolniæ, bo dla ka¿dego programu tworzona jest oddzielna kopia.
	</P></LI>

 <LI>Paragraf to 16 bajtów, wiêc dzielimy DX przez 16. Ale czemu dodajemy 1?<BR>
	<P>Je¿eli kod wystaje ponad adres podzielny przez 16, to czê¶æ jego zostanie utracona.
	Procesor bêdzie wykonywa³ nieznane instrukcje z nieprzewidywalnym skutkiem.
	</P></LI>
</UL>
<P>
Chocia¿ DOS jest ju¿ rzadko u¿ywany, to jednak umiejêtno¶æ pisania TSR-ów mo¿e siê przydaæ, na przyk³ad
je¶li chcemy <q>oszukaæ</q> jaki¶ program i podaæ mu na przyk³ad wiêkszy/mniejszy rozmiar dysku lub co¶
innego. Mo¿na te¿ napisaæ DOS-owy wygaszacz ekranu jako TSR, program który bêdzie wydawa³
d¼wiêki po naci¶niêciu klawisza, wy¶wietla³ czas w naro¿niku ekranu i wiele, wiele innych
ciekawych programów. Nawet je¶li nikomu oprócz nas siê nie przydadz± lub nie spodobaj±, to
zawsze i tak zysk jest dla nas - nabieramy bezcennego do¶wiadczenia i pisaniu i znajdowaniu
b³êdów w programach rezydentnych. Takie umiejêtno¶ci mog± naprawdê siê przydaæ, a z pewno¶ci±
nikomu nie zaszkodz±.</P>

<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>

</BODY></HTML>

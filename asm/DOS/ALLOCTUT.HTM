<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: Dynamiczna alokacja pamiêci</TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Dynamiczna alokacja pamiêci">
<META NAME="Keywords" CONTENT="asm, assembler, asembler, DOS, alokacja pamiêci, alloc, malloc">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:48 GMT">
</HEAD><BODY>

<h1 class="nag">Dynamiczna alokacja pamiêci</h1>
<P>
Ju¿ w ¶rednio zaawansowanych programach pojawia siê potrzeba dynamicznego rezerwowania pamiêci. Na
 przyk³ad, u¿ytkownik podaje nam rozmiar tablicy a my musimy tak± tablicê utworzyæ i na niej operowaæ
 (nie znaj±c wcze¶niej nawet maksymalnego jej rozmiaru). Rozwi±zaniem takich problemów jest
 w³a¶nie dynamiczna alokacja pamiêci.</P>
<P>
Pod DOSem pamiêæ alokuje siê funkcj± AH=48h przerwania 21h, w BX
 podaj±c liczbê paragrafów do zaalokowania (1 paragraf = 16 bajtów). Je¶li alokacja pamiêci siê
 powiedzie, w AX otrzymujemy numer segmentu z zarezerwowan± dla nas pamiêci±. Programy typu .com
 z za³o¿enia zajmuj± ca³± dostêpn± pamiêæ, wiêc aby co¶ zaalokowaæ, nale¿y najpierw trochê
 pamiêci zwolniæ.
</P>
<P>
Zwalnianie pamiêci wykonuje siê funkcj± 49h, w ES podaj±c numer segmentu do zwolnienia.
</P>
<P>
Jak widaæ, teoria nie jest skomplikowana. Przejd¼my wiêc mo¿e do przyk³adu. Ten krótki programik
 ma za zadanie zaalokowaæ 160 bajtów, wyzerowaæ je i na koñcu zwolniæ.</P>

	<BR><a href="#alloctut01" tabindex="1" class="bezdruk">(przeskocz program)</a>
<PRE title="program ilustruj±cy dynamiczn± alokacjê pamiêci">
; Dynamiczna alokacja pamiêci pod DOSem
;
; Autor: Bogdan D., bogdandr (at) op.pl
;
; kompilacja:
;
; nasm -f obj -o allocdos.obj allocdos.asm
; val allocdos.obj,allocdos.exe,,,

section	.text

..start:
	mov	ah, 49h
	mov	es, [ds:2ch]	; ES=segment naszych zmiennych ¶rodowiskowych
	int	21h		; zwalniamy

	mov	ax, seg info
	mov	ds, ax		; DS = nasz segment danych (w razie czego)

	mov	ah, 48h		; rezerwuj pamiêæ
	mov	bx, 10		; 10 paragrafów
	int	21h
	jc	problem		; CF=1 oznacza b³±d

	mov	es, ax		; ES = przydzielony segment

	mov	ah, 9
	mov	dx, info
	int	21h		; wy¶wietl pierwszy napis

	mov	cx, 160		; tyle bajtów wyzerujemy
	xor	di, di		; poczynaj±c od adresu 0 w nowym segmencie
	xor	al, al		; AL = 0
	cld			; kierunek: do przodu
	rep	stosb		; zerujemy obszar

	mov	ah, 49h
	int	21h		; zwalniamy pamiêæ
	jc	problem


	mov	ah, 9
	mov	dx, info2
	int	21h

problem:
	mov	ax, 4c00h
	int	21h

koniec:

section	.data

info	db	&quot;Udana alokacja pamieci.&quot;,10,13,&quot;$&quot;
info2	db	&quot;Udane zwolnienie pamieci.&quot;,10,13,&quot;$&quot;

; program typu .exe musi mieæ zadeklarowany stos
section stack stack
	resb 400h</PRE>

<P><a name="alloctut01" id="alloctut01">Zwalnianie pamiêci w programach typu .com</a>
 polega na zmianie rozmiaru segmentu kodu.
 Wykonuje siê to funkcj± AH=4Ah przerwania 21h, w ES podaj±c segment, którego rozmiar
 chcemy zmieniæ (nasz segment kodu - CS), a w BX - nowy rozmiar w paragrafach.<BR>
Typowy kod wygl±da wiêc tak:</P>

<PRE>
	mov	ax, cs
	mov	es, ax		; bêdziemy zmieniaæ rozmiar segmentu kodu
	mov	bx, koniec	; BX = rozmiar segmentu kodu
	shr	bx, 4		; BX /= 16 - rozmiar w paragrafach
	inc	bx		; +1, ¿eby nie obci±æ naszego programu
	mov	ah, 4ah		; funkcja zmiany rozmiaru
	int	21h</PRE>

<P><em class="wazne">UWAGA: Etykieta <q>koniec</q> musi byæ ostatnim elementem w kodzie programu.</em></P>

<P>
Je¶li potrzeba wiêcej pamiêci, ni¿ DOS mo¿e nam zaoferowaæ, mo¿na
wykorzystaæ pamiêæ <acronym title="Expanded Memory Specification" lang="en">EMS</acronym> lub
<acronym title="Extended Memory Specification" lang="en">XMS</acronym>, o czym piszê w moim
<a href="emsxms.htm" hreflang="pl">mini-kursie o korzystaniu z EMS i XMS</a>.
</P>

<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>

</BODY></HTML>

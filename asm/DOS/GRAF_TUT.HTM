<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="../asm.css" type="text/css">

<TITLE> Asembler: DOS: Tryb graficzny </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="../index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="../index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Tryb graficzny w jêzyku asembler">
<META NAME="Keywords" CONTENT="Ekran, pamiêæ, A000, grafika, asm, assembler, asembler">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="KWrite">
<meta http-equiv="Last-Modified" content="Sun, Jul 10 2016 10:55:49 GMT">
</HEAD><BODY>

<h1 class="nag">Tryb graficzny w jêzyku asembler</h1>


<P>
Na pocz±tek uprzedzam: je¶li my¶licie o wysokich rozdzielczo¶ciach, to siê zawiedziecie, gdy¿ ten
kurs nie bêdzie takich omawia³. Je¶li naprawdê wolicie wysokie rozdzielczo¶ci, to
poszukajcie w Internecie opisu standardu <span lang="en">VESA</span> lub
 <span lang="en">DirectX</span>
 <acronym title="Application Programming Interface" lang="en">API</acronym>.
</P>
<P>
A my, zamiast bawiæ siê w te wszystkie skomplikowane sprawy, zajmiemy siê trybem 13h.
Ten tryb oferuje rozdzielczo¶æ 320x200 w 256 kolorach (co widaæ te¿ w
<A HREF="http://www-2.cs.cmu.edu/afs/cs.cmu.edu/user/ralf/pub/WWW/files.html"
 hreflang="en">Li¶cie Przerwañ Ralfa <span lang="en">Brown</span>'a</A> -
 <acronym title="Ralf Brown's Interrupt List" lang="en">RBIL</acronym>).<BR>
Ale najwa¿niejsz± jego cech± jest to, ¿e 320x200 = 64000 &lt; 64kB, wiêc ca³y ekran mie¶ci siê w
jednym segmencie, co znacznie u³atwia pracê.</P>
<P>
Ekran w trybie graficznym mie¶ci siê w segmencie 0A000h oraz:<BR>
0A000:0000 - pierwszy piksel (bajt, 256 mo¿liwo¶ci)<BR>
0A000:0001 - drugi piksel<BR>
0A000:0002 - trzeci piksel<BR>
...
</P>
<P>
Do zmiany trybu graficznego u¿ywa siê przerwania 10h, funkcji 0 (opis wyjêty z Listy przerwañ
Ralfa <span lang="en">Brown</span>'a):</P>
	<BR><a href="#graf_tut01" tabindex="1" class="bezdruk">(przeskocz opis int 10h, ah=0)</a>
<PRE title="int 10h, ah=0" lang="en">
	INT 10 - VIDEO - SET VIDEO MODE
	        AH = 00h
	        AL = desired video mode (see #00010)
	Return: AL = video mode flag (Phoenix, AMI BIOS)
	            20h mode > 7
	            30h modes 0-5 and 7
	            3Fh mode 6
	        AL = CRT controller mode byte (Phoenix 386 BIOS v1.10)
	Desc:   specify the display mode for the currently active display
		 adapter</PRE>

<P><a name="graf_tut01" id="graf_tut01">Jak widaæ, zmiana trybu graficznego</a>
	 na omawiany tryb 13h nie jest trudniejsza ni¿:</P>
<PRE>
	mov ax, 13h
	int 10h</PRE>

<P>Powrót do tradycyjnego trybu tekstowego 80x25 wygl±da tak:</P>
<PRE>
	mov ax, 3
	int 10h</PRE>

<P>Pytanie brzmi: jak cokolwiek narysowaæ?<BR>
Nic prostszego! Po prostu pod adres:<BR>
wiersz*320 + kolumna<BR>
zapisujemy odpowiedni bajt, na przyk³ad tak (sk³adnia TASM):</P>
<PRE title="zapalenie piksela na ekranie">
	mov ax, 0a000h
	mov es, ax
	xor di,di
	mov byte ptr es:[di],15		; NASM/FASM:   mov byte [es:di],15</PRE>

<P>No ale 1 piksel to za ma³o na nasze ambicje, prawda?<BR>
Spróbujmy narysowaæ poziom± liniê (NASM):</P>
	<BR><a href="#graf_tut02" class="bezdruk">(przeskocz program rysuj±cy liniê poziom±)</a>
<PRE title="program rysuj±cy liniê poziom±">
	; nasm -O999 -o liniapoz.com -f bin liniapoz.asm

	org 100h

		mov ax, 13h
		int 10h			; uruchom tryb graficzny 13h

		mov ax, 0a000h
		mov es, ax
		xor di, di

		mov al, 15
		mov cx, 10

		rep stosb		; przenie¶ 10 bajtów warto¶ci 15 pod
					; es:di = 0a000:0000

		xor ah, ah
		int 16h

		mov ax, 3
		int 10h			; powrót do trybu tekstowego

		mov ax, 4c00h
		int 21h</PRE>

<P><a name="graf_tut02" id="graf_tut02">To chyba nie by³o zbyt trudne</a>, prawda?
No to spróbujmy co¶ trudniejszego: linia pionowa.</P>
<P>
Ca³a <q>filozofia</q> w tym przypadku polega na tym, aby po
narysowaniu piksela przej¶æ o 1 wiersz ni¿ej (czyli o 320 bajtów dalej). Piszmy wiêc (NASM):</P>
	<BR><a href="#graf_tut03" class="bezdruk">(przeskocz program rysuj±cy liniê pionow±)</a>
<PRE title="program rysuj±cy liniê pionow±">
	; nasm -O999 -o liniapio.com -f bin liniapio.asm

	org 100h

		mov	ax, 13h
		int	10h

		mov	ax, 0a000h
		mov	es, ax
		xor	di, di

		mov	al, 15
		mov	cx, 100

	rysuj:
		mov	[es:di], al
		add	di, 320
		loop	rysuj

		xor	ah, ah
		int	16h

		mov	ax, 3
		int	10h

		mov	ax, 4c00h
		int	21h</PRE>

<P><a name="graf_tut03" id="graf_tut03">Na razie by³o ³atwo</a>:
 rysowaæ zaczynali¶my w lewym górny rogu, wiêc DI by³ równy 0. A co, je¶li
chcemy wy¶wietlaæ piksele gdzie¶ indziej?<BR>
Có¿, s± dwie mo¿liwo¶ci:</P>
<OL>
 <LI>W czasie pisania programu (czyli przed kompilacj±) znasz dok³adn± pozycjê, gdzie bêdziesz
	rysowaæ.
	<P> W takim przypadku kompilator policzy DI za ciebie, wystarczy wpisaæ co¶ takiego:</P>
	<PRE>		mov di, wiersz*320 + kolumna	</PRE>
	<P>wstawiaj±c w miejsce s³ów <q>wiersz</q> i <q>kolumna</q> znane przez siebie warto¶ci.</P>
	</LI>
 <LI>Pozycja, gdzie bêdziesz rysowaæ jest zmienna i zale¿y na przyk³ad od tego, co wpisze u¿ytkownik.
	<P>Tutaj jest gorzej. Trzeba wpisaæ do programu instrukcje, które przemno¿± wiersz
	przez 320 i dodadz± kolumnê. Nale¿y raczej unikaæ powolnej
	instrukcji (I)MUL. Ten problem rozwi±¿emy tak (wiersz i kolumna to 2 zmienne po 16
	bitów):</P>
	<PRE title="obliczanie pozycji bez u¿ycia (I)MUL">
		mov ax, [wiersz]
		mov bx, [wiersz]	; BX = AX
		shl ax, 8		; AX = AX*256
		shl bx, 6		; BX = BX*64 = AX*64
		add ax, bx		; AX = AX*256 + AX*64 = AX*320 =
					;     = wiersz*320
		add ax, [kolumna]	; AX = wiersz*320 + kolumna

		mov di,ax	</PRE></LI>
</OL>
<P>
Ostatni przyk³ad: rysowanie okrêgu (no, w ka¿dym razie czego¶ co mia³o byæ okrêgiem a ma
kszta³t bardziej przypominaj±cy elipsê...).
Program ten wykorzystuje koprocesor do policzenia sinusów i kosinusów dla k±tów od 0 do 360
stopni, przerobionych na radiany. Komentarze obok instrukcji FPU oznaczaj± stan stosu, od
st(0) z lewej.</P>

	<BR><a href="#graf_tut04" class="bezdruk">(przeskocz program rysuj±cy ko³o)</a>
<PRE title="program rysuj±cy ko³o">
	; nasm -O999 -o kolo.com -f bin kolo.asm

	org 100h

		mov ax, 13h
		int 10h

		mov ax, 0a000h
		mov es, ax

		mov cx, 360

		finit
		fldpi
		fild word [sto80]

		fdivp st1, st0		; pi/180

		fld1
		fild word [r]		; r, 1, pi/180
		fldz			; k±t=0, r, 1, pi/180

		mov al, 15

	rysuj:
		fld st0			; k±t, k±t, r, 1, pi/180

		fmul st4		; k±t w radianach
		mov di, 100*320 + 160	; ¶rodek ekranu

		fsin			; sin(k±t), k±t, r, 1, pi/180
		fmul st2		; sin(k±t)*r, k±t, r, 1, pi/180

		fistp word [wys]	; k±t, r, 1, pi/180

		fld st0			; k±t, k±t, r, 1, pi/180
		fmul st4		; k±t w radianach
		fcos			; cos(k±t), k±t, r, 1, pi/180
		fmul st2		; r*cos(k±t), k±t, r, 1, pi/180

		fistp word [szer]	; k±t, r, 1, pi/180

		add di, [szer]		; dodajemy odleg³o¶æ poziom±

		mov dx, [wys]
		mov bx, dx
		shl dx, 8
		shl bx, 6
		add dx, bx		; dx = wys*320

		sub di, dx		; odejmujemy odleg³o¶æ pionow±

		mov [es:di], al		; wy¶wietlamy piksel

		fadd st0, st2		; kat += 1

		dec cx
		jnz rysuj

		finit

		xor ah, ah
		int 16h

		mov ax, 3
		int 10h

		mov ax, 4c00h
		int 21h

	r	dw	50
	szer	dw	0
	wys	dw	0
	sto80	dw	180</PRE>

<P><a name="graf_tut04" id="graf_tut04">Podobnie, u¿ywaj±c FSIN i FCOS</a>,
 mo¿na rysowaæ na przyk³ad linie uko¶ne, które pomin±³em w tym kursie.
</P>
<P>
Mam nadziejê, ¿e po lekturze tego odcinka ka¿dy bez problemów bêdzie rysowa³ w tym do¶æ prostym
(zw³aszcza do nauki) trybie graficznym.</P>
<P>Mi³ego eksperymentowania!</P>

<br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="../index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="../index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="../ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>

</BODY></HTML>
